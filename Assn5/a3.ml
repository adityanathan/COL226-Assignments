type token =
  | COMMA
  | TILDA
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | DELIMITER
  | EOF
  | EQ
  | GT
  | LT
  | ABS
  | EXP
  | DIV
  | REM
  | TIMES
  | PLUS
  | MINUS
  | DISJ
  | CONJ
  | NOT
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | PARALLEL
  | LOCAL
  | COLON
  | TINT
  | TBOOL
  | TUNIT
  | ARROW
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
    exception Tuple_value_not_an_integer
    exception Empty_Expression
    let extract_int x = match x with
    |  N (a) -> a
    | _     -> raise Tuple_value_not_an_integer
# 54 "a3.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* TILDA *);
  259 (* LP *);
  260 (* RP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* FI *);
  265 (* DELIMITER *);
    0 (* EOF *);
  266 (* EQ *);
  267 (* GT *);
  268 (* LT *);
  269 (* ABS *);
  270 (* EXP *);
  271 (* DIV *);
  272 (* REM *);
  273 (* TIMES *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* DISJ *);
  277 (* CONJ *);
  278 (* NOT *);
  279 (* PROJ *);
  280 (* LET *);
  281 (* IN *);
  282 (* END *);
  283 (* BACKSLASH *);
  284 (* DOT *);
  285 (* DEF *);
  286 (* SEMICOLON *);
  287 (* PARALLEL *);
  288 (* LOCAL *);
  289 (* COLON *);
  290 (* TINT *);
  291 (* TBOOL *);
  292 (* TUNIT *);
  293 (* ARROW *);
    0|]

let yytransl_block = [|
  294 (* INT *);
  295 (* BOOL *);
  296 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\003\000\003\000\004\000\004\000\005\000\005\000\
\006\000\006\000\006\000\006\000\006\000\006\000\007\000\007\000\
\007\000\008\000\008\000\008\000\008\000\009\000\009\000\010\000\
\010\000\011\000\011\000\012\000\012\000\014\000\014\000\016\000\
\016\000\015\000\017\000\017\000\017\000\017\000\018\000\018\000\
\019\000\019\000\021\000\021\000\013\000\013\000\013\000\001\000\
\001\000\001\000\001\000\022\000\020\000\020\000\020\000\020\000\
\020\000\023\000\025\000\025\000\024\000\000\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\001\000\003\000\001\000\002\000\001\000\
\004\000\004\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\003\000\001\000\002\000\001\000\002\000\
\001\000\007\000\001\000\007\000\001\000\005\000\001\000\003\000\
\001\000\001\000\004\000\004\000\001\000\001\000\006\000\008\000\
\005\000\001\000\003\000\001\000\001\000\001\000\001\000\003\000\
\003\000\005\000\001\000\006\000\001\000\001\000\001\000\001\000\
\001\000\005\000\003\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\046\000\047\000\000\000\063\000\000\000\000\000\006\000\000\000\
\000\000\000\000\021\000\023\000\025\000\027\000\044\000\029\000\
\031\000\000\000\038\000\042\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\022\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\043\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\019\000\018\000\000\000\000\000\
\053\000\054\000\055\000\000\000\056\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\035\000\000\000\000\000\000\000\050\000\000\000\
\030\000\000\000\000\000\041\000\000\000\000\000\052\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\028\000\000\000\000\000\058\000\040\000\059\000"

let yydgoto = "\003\000\
\006\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\043\000\098\000\
\033\000\034\000\035\000\126\000\036\000\007\000\093\000\094\000\
\127\000"

let yysindex = "\026\000\
\004\255\001\000\000\000\248\254\004\255\000\000\064\255\162\255\
\016\255\016\255\000\000\162\255\016\255\034\255\004\255\019\255\
\000\000\000\000\101\255\000\000\048\255\070\255\000\000\110\255\
\116\255\108\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\255\000\000\000\000\085\255\090\255\004\255\004\255\
\000\000\065\255\131\255\082\255\000\000\000\000\088\255\113\255\
\109\255\043\255\016\255\016\255\162\255\074\255\106\255\162\255\
\162\255\162\255\162\255\162\255\043\255\039\255\004\255\000\000\
\000\000\000\000\016\255\016\255\000\000\142\255\001\000\039\255\
\016\255\144\255\070\255\000\000\116\255\162\255\116\255\162\255\
\116\255\108\255\108\255\000\000\000\000\000\000\145\255\039\255\
\000\000\000\000\000\000\007\255\000\000\000\000\124\255\048\255\
\150\255\148\255\079\255\088\255\127\255\239\254\065\255\000\000\
\116\255\116\255\000\000\008\255\001\000\039\255\000\000\016\255\
\000\000\016\255\151\255\000\000\134\255\039\255\000\000\117\255\
\000\000\006\255\187\255\016\255\048\255\013\255\155\255\000\000\
\000\000\076\255\039\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\006\000\072\000\000\000\127\001\
\193\000\158\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\159\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\131\000\000\000\224\000\000\000\255\000\000\000\
\030\001\189\001\220\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\255\
\164\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\001\094\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\255\
\000\000\000\000\000\000\000\000\162\000\165\255\000\000\000\000\
\000\000\159\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\251\255\198\255\249\255\112\000\252\255\000\000\225\255\084\000\
\004\000\000\000\043\000\000\000\213\255\000\000\196\255\058\000\
\042\000\000\000\000\000\199\255\000\000\000\000\000\000\000\000\
\040\000"

let yytablesize = 763
let yytable = "\038\000\
\011\000\042\000\044\000\070\000\092\000\001\000\097\000\051\000\
\046\000\048\000\117\000\041\000\101\000\128\000\102\000\045\000\
\109\000\008\000\009\000\110\000\010\000\077\000\079\000\081\000\
\118\000\051\000\001\000\002\000\012\000\131\000\108\000\037\000\
\004\000\064\000\065\000\005\000\047\000\013\000\014\000\015\000\
\045\000\088\000\016\000\110\000\110\000\073\000\105\000\076\000\
\106\000\110\000\119\000\097\000\120\000\017\000\018\000\019\000\
\115\000\095\000\049\000\096\000\099\000\084\000\085\000\086\000\
\061\000\103\000\015\000\051\000\066\000\016\000\061\000\004\000\
\089\000\090\000\091\000\008\000\009\000\061\000\010\000\133\000\
\017\000\018\000\019\000\078\000\051\000\114\000\012\000\068\000\
\061\000\034\000\052\000\074\000\034\000\039\000\040\000\051\000\
\014\000\015\000\051\000\037\000\016\000\051\000\087\000\050\000\
\096\000\061\000\122\000\008\000\009\000\125\000\010\000\017\000\
\018\000\019\000\063\000\080\000\130\000\062\000\012\000\053\000\
\054\000\055\000\058\000\059\000\060\000\017\000\018\000\069\000\
\014\000\015\000\003\000\067\000\016\000\056\000\057\000\008\000\
\124\000\071\000\010\000\082\000\083\000\072\000\100\000\017\000\
\018\000\019\000\012\000\104\000\107\000\111\000\112\000\113\000\
\116\000\110\000\123\000\013\000\014\000\015\000\132\000\034\000\
\016\000\039\000\075\000\008\000\009\000\129\000\010\000\033\000\
\060\000\121\000\134\000\017\000\018\000\019\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\015\000\000\000\000\000\016\000\009\000\000\000\010\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\018\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\015\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\017\000\018\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\008\000\009\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\014\000\
\015\000\000\000\000\000\016\000\000\000\012\000\001\000\001\000\
\051\000\051\000\000\000\001\000\001\000\000\000\017\000\018\000\
\019\000\045\000\000\000\000\000\045\000\000\000\045\000\045\000\
\045\000\000\000\045\000\045\000\045\000\000\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\009\000\000\000\
\000\000\045\000\045\000\000\000\000\000\000\000\045\000\045\000\
\004\000\000\000\004\000\004\000\000\000\004\000\004\000\004\000\
\000\000\004\000\004\000\004\000\000\000\000\000\004\000\004\000\
\004\000\004\000\004\000\004\000\000\000\010\000\000\000\000\000\
\004\000\004\000\000\000\000\000\037\000\004\000\004\000\037\000\
\000\000\037\000\037\000\037\000\000\000\037\000\037\000\037\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\000\000\037\000\037\000\008\000\000\000\
\000\000\037\000\037\000\003\000\000\000\003\000\003\000\000\000\
\003\000\003\000\003\000\000\000\003\000\003\000\003\000\000\000\
\000\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
\000\000\000\000\000\000\003\000\003\000\017\000\000\000\000\000\
\003\000\003\000\039\000\000\000\039\000\039\000\000\000\039\000\
\039\000\039\000\000\000\039\000\039\000\039\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\000\000\039\000\000\000\
\000\000\000\000\039\000\039\000\016\000\000\000\000\000\039\000\
\039\000\014\000\000\000\014\000\014\000\000\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\000\000\000\000\014\000\
\014\000\014\000\000\000\000\000\014\000\014\000\000\000\000\000\
\000\000\014\000\014\000\015\000\000\000\000\000\014\000\014\000\
\013\000\000\000\013\000\013\000\000\000\013\000\013\000\013\000\
\000\000\013\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\000\000\000\000\013\000\013\000\000\000\000\000\000\000\
\013\000\013\000\000\000\000\000\000\000\013\000\013\000\011\000\
\000\000\011\000\011\000\000\000\011\000\011\000\011\000\000\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\011\000\
\000\000\000\000\011\000\011\000\000\000\000\000\000\000\011\000\
\011\000\000\000\000\000\000\000\011\000\011\000\012\000\000\000\
\012\000\012\000\000\000\012\000\012\000\012\000\000\000\012\000\
\012\000\012\000\000\000\000\000\012\000\012\000\012\000\000\000\
\000\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\000\000\000\000\000\000\012\000\012\000\000\000\000\000\009\000\
\000\000\009\000\009\000\000\000\009\000\009\000\009\000\000\000\
\009\000\009\000\009\000\000\000\000\000\009\000\009\000\009\000\
\000\000\000\000\009\000\009\000\000\000\000\000\000\000\009\000\
\009\000\000\000\000\000\000\000\009\000\009\000\010\000\000\000\
\010\000\010\000\000\000\010\000\010\000\010\000\000\000\010\000\
\010\000\010\000\000\000\000\000\010\000\010\000\010\000\000\000\
\000\000\010\000\010\000\000\000\000\000\000\000\010\000\010\000\
\000\000\000\000\000\000\010\000\010\000\000\000\000\000\008\000\
\000\000\008\000\008\000\000\000\008\000\008\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\008\000\
\008\000\000\000\000\000\000\000\008\000\008\000\017\000\000\000\
\017\000\017\000\000\000\017\000\017\000\017\000\000\000\017\000\
\017\000\017\000\000\000\000\000\000\000\000\000\000\000\017\000\
\017\000\017\000\017\000\000\000\000\000\000\000\017\000\017\000\
\000\000\000\000\000\000\017\000\017\000\016\000\000\000\016\000\
\016\000\000\000\016\000\016\000\016\000\000\000\016\000\016\000\
\016\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\000\000\000\000\000\000\016\000\016\000\000\000\
\000\000\000\000\016\000\016\000\015\000\000\000\015\000\015\000\
\000\000\015\000\015\000\015\000\000\000\015\000\015\000\015\000\
\000\000\000\000\000\000\000\000\000\000\015\000\015\000\015\000\
\015\000\000\000\000\000\000\000\015\000\015\000\000\000\000\000\
\000\000\015\000\015\000"

let yycheck = "\005\000\
\000\000\009\000\010\000\047\000\062\000\000\000\067\000\000\000\
\013\000\015\000\028\001\008\000\071\000\008\001\072\000\012\000\
\010\001\002\001\003\001\037\001\005\001\053\000\054\000\055\000\
\017\001\020\001\001\000\002\000\013\001\017\001\088\000\040\001\
\029\001\039\000\040\000\032\001\003\001\022\001\023\001\024\001\
\000\000\003\001\027\001\037\001\037\001\003\001\078\000\052\000\
\080\000\037\001\109\000\112\000\110\000\038\001\039\001\040\001\
\100\000\063\000\040\001\067\000\068\000\058\000\059\000\060\000\
\004\001\073\000\024\001\020\001\004\001\027\001\010\001\000\000\
\034\001\035\001\036\001\002\001\003\001\017\001\005\001\004\001\
\038\001\039\001\040\001\010\001\020\001\007\001\013\001\006\001\
\028\001\001\001\021\001\050\000\004\001\030\001\031\001\020\001\
\023\001\024\001\020\001\000\000\027\001\020\001\061\000\003\001\
\112\000\003\001\114\000\002\001\003\001\117\000\005\001\038\001\
\039\001\040\001\025\001\010\001\124\000\033\001\013\001\010\001\
\011\001\012\001\015\001\016\001\017\001\038\001\039\001\040\001\
\023\001\024\001\000\000\001\001\027\001\018\001\019\001\002\001\
\003\001\025\001\005\001\056\000\057\000\033\001\001\001\038\001\
\039\001\040\001\013\001\004\001\004\001\026\001\001\001\004\001\
\026\001\037\001\004\001\022\001\023\001\024\001\004\001\001\001\
\027\001\000\000\051\000\002\001\003\001\123\000\005\001\004\001\
\004\001\112\000\131\000\038\001\039\001\040\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\027\001\003\001\255\255\005\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\024\001\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\038\001\039\001\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\255\255\255\255\027\001\255\255\000\000\025\001\026\001\
\025\001\026\001\255\255\030\001\031\001\255\255\038\001\039\001\
\040\001\001\001\255\255\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\000\000\255\255\
\255\255\025\001\026\001\255\255\255\255\255\255\030\001\031\001\
\001\001\255\255\003\001\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\000\000\255\255\255\255\
\025\001\026\001\255\255\255\255\001\001\030\001\031\001\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\000\000\255\255\
\255\255\030\001\031\001\001\001\255\255\003\001\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\025\001\026\001\000\000\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\255\255\
\255\255\255\255\025\001\026\001\000\000\255\255\255\255\030\001\
\031\001\001\001\255\255\003\001\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\255\255\
\255\255\025\001\026\001\000\000\255\255\255\255\030\001\031\001\
\001\001\255\255\003\001\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\031\001\001\001\
\255\255\003\001\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\030\001\031\001\001\001\255\255\
\003\001\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\001\001\
\255\255\003\001\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\030\001\031\001\001\001\255\255\
\003\001\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\001\001\
\255\255\003\001\004\001\255\255\006\001\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\030\001\031\001\001\001\255\255\
\003\001\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\001\001\255\255\003\001\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\025\001\026\001\255\255\
\255\255\255\255\030\001\031\001\001\001\255\255\003\001\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\031\001"

let yynames_const = "\
  COMMA\000\
  TILDA\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  DELIMITER\000\
  EOF\000\
  EQ\000\
  GT\000\
  LT\000\
  ABS\000\
  EXP\000\
  DIV\000\
  REM\000\
  TIMES\000\
  PLUS\000\
  MINUS\000\
  DISJ\000\
  CONJ\000\
  NOT\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  PARALLEL\000\
  LOCAL\000\
  COLON\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  ARROW\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 26 "a3.mly"
                                               ( _1 )
# 442 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "a3.mly"
                                                      ( raise Empty_Expression )
# 448 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 31 "a3.mly"
                                                  (Disjunction (_1, _3))
# 456 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 32 "a3.mly"
                                                  (_1)
# 463 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 36 "a3.mly"
                                                  (Conjunction (_1, _3))
# 471 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 37 "a3.mly"
                                                  (_1)
# 478 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 42 "a3.mly"
                                                  (Not (_2))
# 485 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 43 "a3.mly"
                                                  (_1)
# 492 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 47 "a3.mly"
                                                  (GreaterTE (_1, _4))
# 500 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 48 "a3.mly"
                                                  (LessTE (_1, _4))
# 508 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 49 "a3.mly"
                                                  (GreaterT (_1, _3))
# 516 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 50 "a3.mly"
                                                  (LessT (_1, _3))
# 524 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 51 "a3.mly"
                                                  (Equals (_1, _3))
# 532 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 52 "a3.mly"
                                                  (_1)
# 539 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 56 "a3.mly"
                                                  (Sub (_1, _3))
# 547 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 57 "a3.mly"
                                                  (Add (_1, _3))
# 555 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 58 "a3.mly"
                                                  (_1)
# 562 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 62 "a3.mly"
                                                  (Mult (_1, _3))
# 570 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 63 "a3.mly"
                                                  (Rem (_1, _3))
# 578 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 64 "a3.mly"
                                                  (Div (_1, _3))
# 586 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 65 "a3.mly"
                                                  (_1)
# 593 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 73 "a3.mly"
                                                  (Abs (_2))
# 600 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_minus_expr) in
    Obj.repr(
# 74 "a3.mly"
                                                  (_1)
# 607 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 79 "a3.mly"
                                                  (Negative(_2))
# 614 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 80 "a3.mly"
                                                  (_1)
# 621 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'or_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 84 "a3.mly"
                                                    (IfThenElse(_2,_4,_6))
# 630 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expr) in
    Obj.repr(
# 85 "a3.mly"
                                                    (_1)
# 637 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'constant) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'constant) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 88 "a3.mly"
                                                   (Project ((extract_int _3, extract_int _5),_7))
# 646 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 89 "a3.mly"
                                                    (_1)
# 653 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tuple_sub2_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tuple_sub1_expr) in
    Obj.repr(
# 92 "a3.mly"
                                                    (Tuple (((List.length _4)+1), (_2::_4)))
# 661 "a3.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_call_expr) in
    Obj.repr(
# 93 "a3.mly"
                                                            (_1)
# 668 "a3.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tuple_sub2_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_sub1_expr) in
    Obj.repr(
# 96 "a3.mly"
                                                    (_1::_3)
# 676 "a3.ml"
               : 'tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_sub2_expr) in
    Obj.repr(
# 97 "a3.mly"
                                                    ([_1])
# 683 "a3.ml"
               : 'tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 100 "a3.mly"
                                                    (_1)
# 690 "a3.ml"
               : 'tuple_sub2_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'function_def_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_call_expr) in
    Obj.repr(
# 105 "a3.mly"
                                                  (FunctionCall(_1,_3))
# 698 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_call_expr) in
    Obj.repr(
# 106 "a3.mly"
                                            (FunctionCall(Var(_1),_3))
# 706 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_def_expr) in
    Obj.repr(
# 107 "a3.mly"
                                       (_1)
# 713 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 108 "a3.mly"
                                  (_1)
# 720 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 112 "a3.mly"
                                                       (FunctionAbstraction(_2,_6,_4))
# 729 "a3.ml"
               : 'function_def_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'type_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 113 "a3.mly"
                                                           (FunctionAbstraction(_2,_7,_4))
# 738 "a3.ml"
               : 'function_def_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A1.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 117 "a3.mly"
                                             (Let(_2,_4))
# 746 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 118 "a3.mly"
                                     (_1)
# 753 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 122 "a3.mly"
                                                  (InParen(_2))
# 760 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 123 "a3.mly"
                                                  (_1)
# 767 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "a3.mly"
                                                    (Var (_1))
# 774 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 128 "a3.mly"
                                                    (N (_1))
# 781 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 129 "a3.mly"
                                                    (B (_1))
# 788 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'def_unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.definition) in
    Obj.repr(
# 133 "a3.mly"
                                         (Sequence([_1]@[_3]))
# 796 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'def_unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.definition) in
    Obj.repr(
# 134 "a3.mly"
                                         (Parallel([_1]@[_3]))
# 804 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A1.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A1.definition) in
    Obj.repr(
# 135 "a3.mly"
                                            (Local(_2,_4))
# 812 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def_unit) in
    Obj.repr(
# 136 "a3.mly"
                               (_1)
# 819 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 140 "a3.mly"
                                                  ( Simple(_2, _6, _4) )
# 828 "a3.ml"
               : 'def_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "a3.mly"
                            ( Tint )
# 834 "a3.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "a3.mly"
                              ( Tbool )
# 840 "a3.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "a3.mly"
                              (	Tunit )
# 846 "a3.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_tuple_expr) in
    Obj.repr(
# 147 "a3.mly"
                                   (_1)
# 853 "a3.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_func_expr) in
    Obj.repr(
# 148 "a3.mly"
                                  (_1)
# 860 "a3.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'type_tuple_sub1_expr) in
    Obj.repr(
# 152 "a3.mly"
                                                   (Ttuple (_2::_4))
# 868 "a3.ml"
               : 'type_tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_tuple_sub1_expr) in
    Obj.repr(
# 155 "a3.mly"
                                                   (_1::_3)
# 876 "a3.ml"
               : 'type_tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 156 "a3.mly"
                                                 ([_1])
# 883 "a3.ml"
               : 'type_tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 160 "a3.mly"
                                       (Tfunc(_1,_3))
# 891 "a3.ml"
               : 'type_func_expr))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
