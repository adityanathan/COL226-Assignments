type token =
  | COMMA
  | TILDA
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | DELIMITER
  | EOF
  | EQ
  | GT
  | LT
  | ABS
  | EXP
  | DIV
  | REM
  | TIMES
  | PLUS
  | MINUS
  | DISJ
  | CONJ
  | NOT
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | PARALLEL
  | LOCAL
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
    exception Tuple_value_not_an_integer
    exception Empty_Expression
    let extract_int x = match x with
    |  N (a) -> a
    | _     -> raise Tuple_value_not_an_integer
# 49 "a3.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* TILDA *);
  259 (* LP *);
  260 (* RP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* FI *);
  265 (* DELIMITER *);
    0 (* EOF *);
  266 (* EQ *);
  267 (* GT *);
  268 (* LT *);
  269 (* ABS *);
  270 (* EXP *);
  271 (* DIV *);
  272 (* REM *);
  273 (* TIMES *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* DISJ *);
  277 (* CONJ *);
  278 (* NOT *);
  279 (* PROJ *);
  280 (* LET *);
  281 (* IN *);
  282 (* END *);
  283 (* BACKSLASH *);
  284 (* DOT *);
  285 (* DEF *);
  286 (* SEMICOLON *);
  287 (* PARALLEL *);
  288 (* LOCAL *);
    0|]

let yytransl_block = [|
  289 (* INT *);
  290 (* BOOL *);
  291 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\004\000\004\000\003\000\003\000\003\000\005\000\
\005\000\006\000\006\000\007\000\007\000\008\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\010\000\010\000\
\010\000\011\000\011\000\011\000\011\000\012\000\012\000\012\000\
\013\000\013\000\013\000\014\000\014\000\015\000\015\000\017\000\
\017\000\019\000\019\000\018\000\018\000\020\000\020\000\016\000\
\016\000\016\000\001\000\001\000\001\000\001\000\021\000\000\000\
\000\000"

let yylen = "\002\000\
\001\000\001\000\004\000\006\000\004\000\001\000\001\000\005\000\
\001\000\003\000\001\000\003\000\001\000\002\000\002\000\001\000\
\004\000\004\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\003\000\001\000\002\000\002\000\001\000\
\002\000\002\000\001\000\007\000\001\000\007\000\001\000\005\000\
\001\000\003\000\001\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\003\000\003\000\005\000\001\000\004\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\049\000\050\000\048\000\057\000\001\000\000\000\007\000\000\000\
\000\000\013\000\000\000\000\000\000\000\029\000\032\000\035\000\
\037\000\047\000\039\000\041\000\000\000\000\000\000\000\000\000\
\034\000\033\000\000\000\000\000\041\000\000\000\031\000\030\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\052\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\027\000\026\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\005\000\000\000\000\000\053\000\000\000\040\000\000\000\
\000\000\008\000\000\000\000\000\042\000\000\000\000\000\004\000\
\036\000\038\000"

let yydgoto = "\003\000\
\006\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\044\000\092\000\036\000\007\000"

let yysindex = "\046\000\
\250\254\001\000\000\000\234\254\250\254\000\000\072\255\112\255\
\022\255\022\255\000\000\112\255\022\255\059\255\250\254\025\255\
\000\000\000\000\000\000\000\000\000\000\069\255\000\000\055\255\
\058\255\000\000\056\255\093\255\103\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\255\091\255\250\254\250\254\
\000\000\000\000\013\255\106\255\000\000\012\255\000\000\000\000\
\000\000\056\255\057\255\097\255\096\255\007\255\022\255\022\255\
\112\255\071\255\075\255\112\255\112\255\112\255\112\255\112\255\
\001\000\250\254\000\000\000\000\000\000\022\255\022\255\127\255\
\001\000\016\000\125\255\058\255\000\000\093\255\112\255\093\255\
\112\255\093\255\103\255\103\255\000\000\000\000\000\000\000\000\
\104\255\055\255\130\255\129\255\001\255\057\255\108\255\001\000\
\000\000\000\000\093\255\093\255\000\000\022\255\000\000\022\255\
\132\255\000\000\133\255\013\255\000\000\038\255\019\255\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\163\000\000\000\132\000\
\115\001\000\000\075\001\144\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\255\000\000\000\000\000\000\000\000\000\000\
\000\000\106\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\001\000\000\175\000\000\000\206\000\
\000\000\237\000\082\000\113\000\000\000\000\000\000\000\000\000\
\000\000\082\255\135\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\001\044\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\137\255\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\255\255\219\255\086\000\000\000\000\000\249\255\087\000\250\255\
\128\000\042\000\066\000\007\000\131\000\140\000\000\000\211\255\
\038\000\197\255\048\000\247\255\000\000"

let yytablesize = 689
let yytable = "\045\000\
\011\000\043\000\046\000\038\000\054\000\072\000\049\000\104\000\
\008\000\009\000\091\000\010\000\037\000\052\000\041\000\011\000\
\069\000\071\000\047\000\012\000\055\000\009\000\004\000\008\000\
\009\000\005\000\010\000\088\000\013\000\014\000\015\000\055\000\
\055\000\016\000\012\000\095\000\097\000\067\000\068\000\017\000\
\018\000\019\000\091\000\013\000\014\000\113\000\001\000\002\000\
\105\000\077\000\025\000\017\000\018\000\019\000\017\000\018\000\
\019\000\055\000\107\000\053\000\045\000\051\000\090\000\093\000\
\089\000\057\000\058\000\059\000\085\000\086\000\087\000\054\000\
\008\000\009\000\055\000\010\000\008\000\009\000\056\000\010\000\
\079\000\024\000\044\000\012\000\081\000\044\000\045\000\012\000\
\108\000\017\000\018\000\019\000\045\000\014\000\090\000\065\000\
\110\000\014\000\078\000\080\000\082\000\039\000\040\000\017\000\
\018\000\019\000\070\000\017\000\018\000\019\000\060\000\061\000\
\023\000\008\000\009\000\066\000\010\000\062\000\063\000\064\000\
\099\000\073\000\100\000\074\000\012\000\083\000\084\000\094\000\
\098\000\101\000\102\000\009\000\103\000\106\000\014\000\111\000\
\112\000\044\000\043\000\075\000\050\000\076\000\048\000\022\000\
\017\000\018\000\019\000\042\000\114\000\109\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\009\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\012\000\000\000\000\000\
\000\000\008\000\096\000\000\000\010\000\000\000\013\000\014\000\
\015\000\000\000\000\000\016\000\012\000\054\000\054\000\000\000\
\000\000\017\000\018\000\019\000\000\000\013\000\014\000\015\000\
\000\000\000\000\016\000\018\000\000\000\000\000\000\000\000\000\
\017\000\018\000\019\000\025\000\000\000\025\000\025\000\000\000\
\025\000\025\000\025\000\000\000\025\000\025\000\025\000\000\000\
\000\000\000\000\000\000\000\000\025\000\025\000\025\000\025\000\
\000\000\000\000\016\000\025\000\025\000\000\000\000\000\000\000\
\025\000\025\000\024\000\000\000\024\000\024\000\000\000\024\000\
\024\000\024\000\000\000\024\000\024\000\024\000\000\000\000\000\
\000\000\000\000\000\000\024\000\024\000\024\000\024\000\000\000\
\000\000\014\000\024\000\024\000\000\000\000\000\000\000\024\000\
\024\000\023\000\011\000\023\000\023\000\000\000\023\000\023\000\
\023\000\000\000\023\000\023\000\023\000\000\000\000\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\009\000\009\000\
\000\000\023\000\023\000\000\000\000\000\000\000\023\000\023\000\
\022\000\010\000\022\000\022\000\000\000\022\000\022\000\022\000\
\000\000\022\000\022\000\022\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\022\000\022\000\000\000\006\000\000\000\
\022\000\022\000\000\000\000\000\000\000\022\000\022\000\021\000\
\000\000\021\000\021\000\000\000\021\000\021\000\021\000\000\000\
\021\000\021\000\021\000\006\000\006\000\000\000\000\000\000\000\
\006\000\006\000\021\000\021\000\000\000\000\000\000\000\021\000\
\021\000\000\000\000\000\000\000\021\000\021\000\019\000\000\000\
\019\000\019\000\000\000\019\000\019\000\019\000\000\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\000\000\000\000\000\000\019\000\019\000\
\000\000\000\000\000\000\019\000\019\000\020\000\000\000\020\000\
\020\000\000\000\020\000\020\000\020\000\000\000\020\000\020\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\020\000\000\000\000\000\000\000\020\000\020\000\000\000\
\000\000\000\000\020\000\020\000\017\000\000\000\017\000\017\000\
\000\000\017\000\017\000\017\000\000\000\017\000\017\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\017\000\000\000\000\000\000\000\017\000\017\000\000\000\000\000\
\000\000\017\000\017\000\000\000\018\000\000\000\018\000\018\000\
\000\000\018\000\018\000\018\000\000\000\018\000\018\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\000\000\000\000\000\000\018\000\018\000\000\000\000\000\
\000\000\018\000\018\000\016\000\000\000\016\000\016\000\000\000\
\016\000\016\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\
\000\000\000\000\000\000\016\000\016\000\000\000\000\000\000\000\
\016\000\016\000\014\000\000\000\014\000\014\000\000\000\014\000\
\014\000\014\000\000\000\011\000\000\000\011\000\011\000\000\000\
\011\000\011\000\011\000\000\000\000\000\014\000\014\000\000\000\
\000\000\000\000\014\000\014\000\000\000\000\000\011\000\014\000\
\014\000\000\000\000\000\011\000\011\000\000\000\000\000\000\000\
\011\000\011\000\010\000\000\000\010\000\010\000\000\000\010\000\
\010\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\010\000\010\000\000\000\000\000\000\000\010\000\
\010\000"

let yycheck = "\009\000\
\000\000\009\000\010\000\005\000\000\000\051\000\013\000\007\001\
\002\001\003\001\070\000\005\001\035\001\015\000\008\000\000\000\
\004\001\006\001\012\000\013\001\020\001\003\001\029\001\002\001\
\003\001\032\001\005\001\065\000\022\001\023\001\024\001\020\001\
\020\001\027\001\013\001\073\000\074\000\039\000\040\000\033\001\
\034\001\035\001\102\000\022\001\023\001\008\001\001\000\002\000\
\094\000\056\000\000\000\033\001\034\001\035\001\033\001\034\001\
\035\001\020\001\096\000\035\001\070\000\003\001\070\000\071\000\
\066\000\010\001\011\001\012\001\062\000\063\000\064\000\003\001\
\002\001\003\001\020\001\005\001\002\001\003\001\021\001\005\001\
\010\001\000\000\001\001\013\001\010\001\004\001\096\000\013\001\
\096\000\033\001\034\001\035\001\102\000\023\001\102\000\010\001\
\104\000\023\001\057\000\058\000\059\000\030\001\031\001\033\001\
\034\001\035\001\001\001\033\001\034\001\035\001\018\001\019\001\
\000\000\002\001\003\001\025\001\005\001\015\001\016\001\017\001\
\079\000\025\001\081\000\028\001\013\001\060\000\061\000\001\001\
\004\001\026\001\001\001\000\000\004\001\026\001\023\001\004\001\
\004\001\001\001\004\001\054\000\013\000\055\000\012\000\000\000\
\033\001\034\001\035\001\008\000\111\000\102\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\013\001\255\255\255\255\
\255\255\002\001\003\001\255\255\005\001\255\255\022\001\023\001\
\024\001\255\255\255\255\027\001\013\001\025\001\026\001\255\255\
\255\255\033\001\034\001\035\001\255\255\022\001\023\001\024\001\
\255\255\255\255\027\001\000\000\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\001\001\255\255\003\001\004\001\255\255\
\006\001\007\001\008\001\255\255\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\000\000\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\004\001\255\255\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\255\255\
\255\255\000\000\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001\001\001\000\000\003\001\004\001\255\255\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\003\001\004\001\
\255\255\025\001\026\001\255\255\255\255\255\255\030\001\031\001\
\001\001\000\000\003\001\004\001\255\255\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\025\001\026\001\255\255\255\255\
\255\255\030\001\031\001\020\001\021\001\255\255\004\001\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\031\001\001\001\
\255\255\003\001\004\001\255\255\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\020\001\021\001\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\030\001\031\001\001\001\255\255\
\003\001\004\001\255\255\006\001\007\001\008\001\255\255\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\001\001\255\255\003\001\
\004\001\255\255\006\001\007\001\008\001\255\255\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\255\255\255\255\025\001\026\001\255\255\
\255\255\255\255\030\001\031\001\001\001\255\255\003\001\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\031\001\255\255\001\001\255\255\003\001\004\001\
\255\255\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\031\001\001\001\255\255\003\001\004\001\255\255\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\004\001\255\255\006\001\
\007\001\008\001\255\255\001\001\255\255\003\001\004\001\255\255\
\006\001\007\001\008\001\255\255\255\255\020\001\021\001\255\255\
\255\255\255\255\025\001\026\001\255\255\255\255\020\001\030\001\
\031\001\255\255\255\255\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\001\001\255\255\003\001\004\001\255\255\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001"

let yynames_const = "\
  COMMA\000\
  TILDA\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  DELIMITER\000\
  EOF\000\
  EQ\000\
  GT\000\
  LT\000\
  ABS\000\
  EXP\000\
  DIV\000\
  REM\000\
  TIMES\000\
  PLUS\000\
  MINUS\000\
  DISJ\000\
  CONJ\000\
  NOT\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  PARALLEL\000\
  LOCAL\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_call_expr) in
    Obj.repr(
# 25 "a3.mly"
                                                          ( _1 )
# 401 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "a3.mly"
                                                      ( raise Empty_Expression )
# 407 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 30 "a3.mly"
                                           (FunctionAbstraction(_2,_4))
# 415 "a3.ml"
               : 'function_def_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 31 "a3.mly"
                                               (FunctionAbstraction(_2,_5))
# 423 "a3.ml"
               : 'function_def_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'function_def_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_call_expr) in
    Obj.repr(
# 34 "a3.mly"
                                                  (FunctionCall(_1,_3))
# 431 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_def_expr) in
    Obj.repr(
# 35 "a3.mly"
                                       (_1)
# 438 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 36 "a3.mly"
                                  (_1)
# 445 "a3.ml"
               : 'function_call_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A1.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 39 "a3.mly"
                                             (Let(_2,_4))
# 453 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 40 "a3.mly"
                                  (_1)
# 460 "a3.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 47 "a3.mly"
                                                  (Disjunction (_1, _3))
# 468 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 48 "a3.mly"
                                                  (_1)
# 475 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 52 "a3.mly"
                                                  (Conjunction (_1, _3))
# 483 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 53 "a3.mly"
                                                  (_1)
# 490 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 57 "a3.mly"
                                                  (Not (_2))
# 497 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 58 "a3.mly"
                                                    (Not (_2))
# 504 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 59 "a3.mly"
                                                  (_1)
# 511 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 63 "a3.mly"
                                                  (GreaterTE (_1, _4))
# 519 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 64 "a3.mly"
                                                  (LessTE (_1, _4))
# 527 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 65 "a3.mly"
                                                  (GreaterT (_1, _3))
# 535 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 66 "a3.mly"
                                                  (LessT (_1, _3))
# 543 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 67 "a3.mly"
                                                  (Equals (_1, _3))
# 551 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 68 "a3.mly"
                                                  (_1)
# 558 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 72 "a3.mly"
                                                  (Sub (_1, _3))
# 566 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 73 "a3.mly"
                                                  (Add (_1, _3))
# 574 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 74 "a3.mly"
                                                  (_1)
# 581 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 78 "a3.mly"
                                                  (Mult (_1, _3))
# 589 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 79 "a3.mly"
                                                  (Rem (_1, _3))
# 597 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 80 "a3.mly"
                                                  (Div (_1, _3))
# 605 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 81 "a3.mly"
                                                  (_1)
# 612 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_minus_expr) in
    Obj.repr(
# 88 "a3.mly"
                                                  (Abs (_2))
# 619 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 89 "a3.mly"
                                                  (Abs (_2))
# 626 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_minus_expr) in
    Obj.repr(
# 90 "a3.mly"
                                                  (_1)
# 633 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 94 "a3.mly"
                                                  (Negative(_2))
# 640 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 95 "a3.mly"
                                                  (Negative(_2))
# 647 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 96 "a3.mly"
                                                  (_1)
# 654 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'or_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 100 "a3.mly"
                                                    (IfThenElse(_2,_4,_6))
# 663 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expr) in
    Obj.repr(
# 101 "a3.mly"
                                                    (_1)
# 670 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'constant) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'constant) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 104 "a3.mly"
                                                    (Project ((extract_int _3, extract_int _5),_7))
# 679 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 105 "a3.mly"
                                                    (_1)
# 686 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tuple_sub2_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tuple_sub1_expr) in
    Obj.repr(
# 108 "a3.mly"
                                                    (Tuple (((List.length _4)+1), (_2::_4)))
# 694 "a3.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 109 "a3.mly"
                                                    (_1)
# 701 "a3.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tuple_sub2_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_sub1_expr) in
    Obj.repr(
# 112 "a3.mly"
                                                    (_1::_3)
# 709 "a3.ml"
               : 'tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_sub2_expr) in
    Obj.repr(
# 113 "a3.mly"
                                                    ([_1])
# 716 "a3.ml"
               : 'tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 116 "a3.mly"
                                                    (_1)
# 723 "a3.ml"
               : 'tuple_sub2_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 117 "a3.mly"
                                                    (_1)
# 730 "a3.ml"
               : 'tuple_sub2_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 120 "a3.mly"
                                                    (InParen(_2))
# 737 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 121 "a3.mly"
                                                    (_1)
# 744 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "a3.mly"
                                                    (Var (_1))
# 751 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 126 "a3.mly"
                                                    (N (_1))
# 758 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 127 "a3.mly"
                                                    (B (_1))
# 765 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'def_unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.definition) in
    Obj.repr(
# 131 "a3.mly"
                                         (Sequence([_1]@[_3]))
# 773 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'def_unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.definition) in
    Obj.repr(
# 132 "a3.mly"
                                         (Parallel([_1]@[_3]))
# 781 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A1.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A1.definition) in
    Obj.repr(
# 133 "a3.mly"
                                            (Local(_2,_4))
# 789 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def_unit) in
    Obj.repr(
# 134 "a3.mly"
                               (_1)
# 796 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 138 "a3.mly"
                                      ( Simple(_2, _4) )
# 804 "a3.ml"
               : 'def_unit))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
