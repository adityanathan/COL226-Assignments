# 7 "a2.mll"
    
    open A3
    exception InvalidToken of string

    let remove_sign s = if s.[0]<>'+' && s.[0]<>'-' then
                            INT (int_of_string s)
                       else if s.[0]='+' then
                                INT (int_of_string (String.sub s 1 ((String.length s)-1)))
                            else
                                INT (-1*int_of_string (String.sub s 1 ((String.length s)-1)))
   (* remove_sign has been defined to help remove the + or - sign at the beginning of a string. *)
   (* It has been assumed that given string will have only one sign as reg exp takes only one sign *)
   
# 16 "a2.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\218\255\219\255\220\255\079\000\001\000\224\255\226\255\
    \002\000\000\000\001\000\007\000\000\000\009\000\236\255\237\255\
    \238\255\011\000\001\000\009\000\163\000\247\000\244\255\245\255\
    \246\255\010\000\036\000\249\255\066\001\250\255\251\255\252\255\
    \000\000\254\255\255\255\007\000\253\255\005\000\005\000\248\255\
    \225\255\038\000\247\255\023\000\241\255\240\255\239\255\229\255\
    \235\255\039\000\032\000\234\255\043\000\055\000\070\000\233\255\
    \228\255\232\255\061\000\067\000\231\255\000\000\059\000\230\255\
    \106\000\096\000\222\255\223\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\034\000\037\000\255\255\255\255\
    \037\000\037\000\037\000\037\000\037\000\037\000\255\255\255\255\
    \255\255\028\000\037\000\037\000\013\000\012\000\255\255\255\255\
    \255\255\037\000\037\000\255\255\005\000\255\255\255\255\255\255\
    \037\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \255\255\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\002\000\000\000\000\000\002\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\022\000\027\000\031\000\034\000\030\000\007\000\018\000\
    \029\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\046\000\006\000\015\000\016\000\014\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\020\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\021\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\017\000\045\000\024\000\000\000\
    \000\000\032\000\035\000\064\000\026\000\011\000\010\000\062\000\
    \049\000\013\000\057\000\040\000\008\000\025\000\019\000\048\000\
    \009\000\061\000\058\000\053\000\012\000\052\000\004\000\047\000\
    \043\000\041\000\036\000\039\000\005\000\067\000\033\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\037\000\042\000\044\000\050\000\038\000\051\000\056\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\054\000\055\000\059\000\060\000\004\000\063\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\065\000\066\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \003\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\004\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\017\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\018\000\000\000\255\255\
    \255\255\000\000\032\000\061\000\000\000\000\000\000\000\008\000\
    \012\000\000\000\010\000\037\000\000\000\000\000\000\000\013\000\
    \000\000\008\000\009\000\011\000\000\000\011\000\004\000\013\000\
    \019\000\025\000\035\000\038\000\000\000\005\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\026\000\041\000\043\000\049\000\026\000\050\000\052\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\053\000\054\000\058\000\059\000\004\000\062\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\020\000\064\000\065\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\255\255\255\255\
    \000\000\255\255\020\000\255\255\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\021\000\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 31 "a2.mll"
                                (COMMA)
# 217 "a2.ml"

  | 1 ->
# 32 "a2.mll"
                                (TILDA)
# 222 "a2.ml"

  | 2 ->
# 33 "a2.mll"
                                (ABS)
# 227 "a2.ml"

  | 3 ->
# 34 "a2.mll"
                                (PLUS)
# 232 "a2.ml"

  | 4 ->
# 35 "a2.mll"
                                (MINUS)
# 237 "a2.ml"

  | 5 ->
let
# 36 "a2.mll"
                            x
# 243 "a2.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "a2.mll"
                                (remove_sign x)
# 247 "a2.ml"

  | 6 ->
# 37 "a2.mll"
                                (TIMES)
# 252 "a2.ml"

  | 7 ->
# 38 "a2.mll"
                                (DIV)
# 257 "a2.ml"

  | 8 ->
# 39 "a2.mll"
                                (REM)
# 262 "a2.ml"

  | 9 ->
# 40 "a2.mll"
                                (EXP)
# 267 "a2.ml"

  | 10 ->
# 41 "a2.mll"
                                (LP)
# 272 "a2.ml"

  | 11 ->
# 42 "a2.mll"
                                (RP)
# 277 "a2.ml"

  | 12 ->
# 43 "a2.mll"
                                (BOOL (true))
# 282 "a2.ml"

  | 13 ->
# 44 "a2.mll"
                                (BOOL (false))
# 287 "a2.ml"

  | 14 ->
# 45 "a2.mll"
                                (NOT)
# 292 "a2.ml"

  | 15 ->
# 46 "a2.mll"
                                (CONJ)
# 297 "a2.ml"

  | 16 ->
# 47 "a2.mll"
                                (DISJ)
# 302 "a2.ml"

  | 17 ->
# 48 "a2.mll"
                                (EQ)
# 307 "a2.ml"

  | 18 ->
# 49 "a2.mll"
                                (LT)
# 312 "a2.ml"

  | 19 ->
# 50 "a2.mll"
                                (GT)
# 317 "a2.ml"

  | 20 ->
# 51 "a2.mll"
                                (IF)
# 322 "a2.ml"

  | 21 ->
# 52 "a2.mll"
                                (THEN)
# 327 "a2.ml"

  | 22 ->
# 53 "a2.mll"
                                (ELSE)
# 332 "a2.ml"

  | 23 ->
# 54 "a2.mll"
                                (FI)
# 337 "a2.ml"

  | 24 ->
# 55 "a2.mll"
                                (PROJ)
# 342 "a2.ml"

  | 25 ->
# 56 "a2.mll"
                     (LET)
# 347 "a2.ml"

  | 26 ->
# 57 "a2.mll"
                   (IN)
# 352 "a2.ml"

  | 27 ->
# 58 "a2.mll"
                     (END)
# 357 "a2.ml"

  | 28 ->
# 59 "a2.mll"
                    (BACKSLASH)
# 362 "a2.ml"

  | 29 ->
# 60 "a2.mll"
                    (DOT)
# 367 "a2.ml"

  | 30 ->
# 61 "a2.mll"
                     (DEF)
# 372 "a2.ml"

  | 31 ->
# 62 "a2.mll"
                                (SEMICOLON)
# 377 "a2.ml"

  | 32 ->
# 63 "a2.mll"
                    (PARALLEL)
# 382 "a2.ml"

  | 33 ->
# 64 "a2.mll"
                      (LOCAL)
# 387 "a2.ml"

  | 34 ->
let
# 65 "a2.mll"
                       x
# 393 "a2.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 65 "a2.mll"
                                (ID (x))
# 397 "a2.ml"

  | 35 ->
# 66 "a2.mll"
                                (EOF)
# 402 "a2.ml"

  | 36 ->
# 67 "a2.mll"
                                (read lexbuf)
# 407 "a2.ml"

  | 37 ->
# 68 "a2.mll"
                                (raise (InvalidToken ("Unexpected character: "^Lexing.lexeme lexbuf)))
# 412 "a2.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

;;

