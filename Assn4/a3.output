   0  $accept : %entry% $end

   1  exp_parser : or_expr
   2             | EOF

   3  or_expr : or_expr DISJ and_expr
   4          | and_expr

   5  and_expr : and_expr CONJ not_expr
   6           | not_expr

   7  not_expr : NOT not_expr
   8           | comparison_expr

   9  comparison_expr : comparison_expr GT EQ add_sub_expr
  10                  | comparison_expr LT EQ add_sub_expr
  11                  | comparison_expr GT add_sub_expr
  12                  | comparison_expr LT add_sub_expr
  13                  | comparison_expr EQ add_sub_expr
  14                  | add_sub_expr

  15  add_sub_expr : add_sub_expr MINUS div_mult_rem_expr
  16               | add_sub_expr PLUS div_mult_rem_expr
  17               | div_mult_rem_expr

  18  div_mult_rem_expr : div_mult_rem_expr TIMES abs_expr
  19                    | div_mult_rem_expr REM abs_expr
  20                    | div_mult_rem_expr DIV abs_expr
  21                    | abs_expr

  22  abs_expr : ABS abs_expr
  23           | unary_minus_expr

  24  unary_minus_expr : TILDA abs_expr
  25                   | ifte_expr

  26  ifte_expr : IF or_expr THEN or_expr ELSE or_expr FI
  27            | proj_expr

  28  proj_expr : PROJ LP constant COMMA constant RP ifte_expr
  29            | tuple_expr

  30  tuple_expr : LP tuple_sub2_expr COMMA tuple_sub1_expr RP
  31             | function_call_expr

  32  tuple_sub1_expr : tuple_sub2_expr COMMA tuple_sub1_expr
  33                  | tuple_sub2_expr

  34  tuple_sub2_expr : or_expr

  35  function_call_expr : function_def_expr LP function_call_expr RP
  36                     | ID LP function_call_expr RP
  37                     | function_def_expr
  38                     | let_expr

  39  function_def_expr : BACKSLASH ID COLON type_expr DOT or_expr
  40                    | BACKSLASH ID COLON type_expr DOT LP or_expr RP

  41  let_expr : LET def_parser IN exp_parser END
  42           | paren_expr

  43  paren_expr : LP or_expr RP
  44             | constant

  45  constant : ID
  46           | INT
  47           | BOOL

  48  def_parser : def_unit SEMICOLON def_parser
  49             | def_unit PARALLEL def_parser
  50             | LOCAL def_parser IN def_parser END
  51             | def_unit

  52  def_unit : DEF ID COLON type_expr EQ exp_parser

  53  type_expr : TINT
  54            | TBOOL
  55            | TUNIT
  56            | type_tuple_expr
  57            | type_func_expr

  58  type_tuple_expr : LP type_expr TIMES type_tuple_sub1_expr RP

  59  type_tuple_sub1_expr : type_expr TIMES type_tuple_sub1_expr
  60                       | type_expr

  61  type_func_expr : type_expr ARROW type_expr

  62  %entry% : '\001' def_parser
  63          | '\002' exp_parser

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	'\002'  shift 2
	.  error

	%entry%  goto 3


state 1
	%entry% : '\001' . def_parser  (62)

	DEF  shift 4
	LOCAL  shift 5
	.  error

	def_parser  goto 6
	def_unit  goto 7


state 2
	%entry% : '\002' . exp_parser  (63)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	EOF  shift 11
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	exp_parser  goto 20
	or_expr  goto 21
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 3
	$accept : %entry% . $end  (0)

	$end  accept


state 4
	def_unit : DEF . ID COLON type_expr EQ exp_parser  (52)

	ID  shift 37
	.  error


state 5
	def_parser : LOCAL . def_parser IN def_parser END  (50)

	DEF  shift 4
	LOCAL  shift 5
	.  error

	def_parser  goto 38
	def_unit  goto 7


state 6
	%entry% : '\001' def_parser .  (62)

	.  reduce 62


state 7
	def_parser : def_unit . SEMICOLON def_parser  (48)
	def_parser : def_unit . PARALLEL def_parser  (49)
	def_parser : def_unit .  (51)

	SEMICOLON  shift 39
	PARALLEL  shift 40
	$end  reduce 51
	IN  reduce 51
	END  reduce 51


state 8
	unary_minus_expr : TILDA . abs_expr  (24)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	abs_expr  goto 41
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 9
	tuple_expr : LP . tuple_sub2_expr COMMA tuple_sub1_expr RP  (30)
	paren_expr : LP . or_expr RP  (43)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 42
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	tuple_sub2_expr  goto 43
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 10
	ifte_expr : IF . or_expr THEN or_expr ELSE or_expr FI  (26)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 44
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 11
	exp_parser : EOF .  (2)

	.  reduce 2


state 12
	abs_expr : ABS . abs_expr  (22)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	abs_expr  goto 45
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 13
	not_expr : NOT . not_expr  (7)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	not_expr  goto 46
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 14
	proj_expr : PROJ . LP constant COMMA constant RP ifte_expr  (28)

	LP  shift 47
	.  error


state 15
	let_expr : LET . def_parser IN exp_parser END  (41)

	DEF  shift 4
	LOCAL  shift 5
	.  error

	def_parser  goto 48
	def_unit  goto 7


state 16
	function_def_expr : BACKSLASH . ID COLON type_expr DOT or_expr  (39)
	function_def_expr : BACKSLASH . ID COLON type_expr DOT LP or_expr RP  (40)

	ID  shift 49
	.  error


state 17
	constant : INT .  (46)

	.  reduce 46


state 18
	constant : BOOL .  (47)

	.  reduce 47


19: shift/reduce conflict (shift 50, reduce 45) on LP
state 19
	function_call_expr : ID . LP function_call_expr RP  (36)
	constant : ID .  (45)

	LP  shift 50
	$end  reduce 45
	COMMA  reduce 45
	RP  reduce 45
	THEN  reduce 45
	ELSE  reduce 45
	FI  reduce 45
	EQ  reduce 45
	GT  reduce 45
	LT  reduce 45
	DIV  reduce 45
	REM  reduce 45
	TIMES  reduce 45
	PLUS  reduce 45
	MINUS  reduce 45
	DISJ  reduce 45
	CONJ  reduce 45
	IN  reduce 45
	END  reduce 45
	SEMICOLON  reduce 45
	PARALLEL  reduce 45


state 20
	%entry% : '\002' exp_parser .  (63)

	.  reduce 63


state 21
	exp_parser : or_expr .  (1)
	or_expr : or_expr . DISJ and_expr  (3)

	DISJ  shift 51
	$end  reduce 1
	IN  reduce 1
	END  reduce 1
	SEMICOLON  reduce 1
	PARALLEL  reduce 1


22: shift/reduce conflict (shift 52, reduce 4) on CONJ
state 22
	or_expr : and_expr .  (4)
	and_expr : and_expr . CONJ not_expr  (5)

	CONJ  shift 52
	$end  reduce 4
	COMMA  reduce 4
	LP  reduce 4
	RP  reduce 4
	THEN  reduce 4
	ELSE  reduce 4
	FI  reduce 4
	EQ  reduce 4
	GT  reduce 4
	LT  reduce 4
	DIV  reduce 4
	REM  reduce 4
	TIMES  reduce 4
	PLUS  reduce 4
	MINUS  reduce 4
	DISJ  reduce 4
	IN  reduce 4
	END  reduce 4
	SEMICOLON  reduce 4
	PARALLEL  reduce 4


state 23
	and_expr : not_expr .  (6)

	.  reduce 6


24: shift/reduce conflict (shift 53, reduce 8) on EQ
24: shift/reduce conflict (shift 54, reduce 8) on GT
24: shift/reduce conflict (shift 55, reduce 8) on LT
state 24
	not_expr : comparison_expr .  (8)
	comparison_expr : comparison_expr . GT EQ add_sub_expr  (9)
	comparison_expr : comparison_expr . LT EQ add_sub_expr  (10)
	comparison_expr : comparison_expr . GT add_sub_expr  (11)
	comparison_expr : comparison_expr . LT add_sub_expr  (12)
	comparison_expr : comparison_expr . EQ add_sub_expr  (13)

	EQ  shift 53
	GT  shift 54
	LT  shift 55
	$end  reduce 8
	COMMA  reduce 8
	LP  reduce 8
	RP  reduce 8
	THEN  reduce 8
	ELSE  reduce 8
	FI  reduce 8
	DIV  reduce 8
	REM  reduce 8
	TIMES  reduce 8
	PLUS  reduce 8
	MINUS  reduce 8
	DISJ  reduce 8
	CONJ  reduce 8
	IN  reduce 8
	END  reduce 8
	SEMICOLON  reduce 8
	PARALLEL  reduce 8


25: shift/reduce conflict (shift 56, reduce 14) on PLUS
25: shift/reduce conflict (shift 57, reduce 14) on MINUS
state 25
	comparison_expr : add_sub_expr .  (14)
	add_sub_expr : add_sub_expr . MINUS div_mult_rem_expr  (15)
	add_sub_expr : add_sub_expr . PLUS div_mult_rem_expr  (16)

	PLUS  shift 56
	MINUS  shift 57
	$end  reduce 14
	COMMA  reduce 14
	LP  reduce 14
	RP  reduce 14
	THEN  reduce 14
	ELSE  reduce 14
	FI  reduce 14
	EQ  reduce 14
	GT  reduce 14
	LT  reduce 14
	DIV  reduce 14
	REM  reduce 14
	TIMES  reduce 14
	DISJ  reduce 14
	CONJ  reduce 14
	IN  reduce 14
	END  reduce 14
	SEMICOLON  reduce 14
	PARALLEL  reduce 14


26: shift/reduce conflict (shift 58, reduce 17) on DIV
26: shift/reduce conflict (shift 59, reduce 17) on REM
26: shift/reduce conflict (shift 60, reduce 17) on TIMES
state 26
	add_sub_expr : div_mult_rem_expr .  (17)
	div_mult_rem_expr : div_mult_rem_expr . TIMES abs_expr  (18)
	div_mult_rem_expr : div_mult_rem_expr . REM abs_expr  (19)
	div_mult_rem_expr : div_mult_rem_expr . DIV abs_expr  (20)

	DIV  shift 58
	REM  shift 59
	TIMES  shift 60
	$end  reduce 17
	COMMA  reduce 17
	LP  reduce 17
	RP  reduce 17
	THEN  reduce 17
	ELSE  reduce 17
	FI  reduce 17
	EQ  reduce 17
	GT  reduce 17
	LT  reduce 17
	PLUS  reduce 17
	MINUS  reduce 17
	DISJ  reduce 17
	CONJ  reduce 17
	IN  reduce 17
	END  reduce 17
	SEMICOLON  reduce 17
	PARALLEL  reduce 17


state 27
	div_mult_rem_expr : abs_expr .  (21)

	.  reduce 21


state 28
	abs_expr : unary_minus_expr .  (23)

	.  reduce 23


state 29
	unary_minus_expr : ifte_expr .  (25)

	.  reduce 25


state 30
	ifte_expr : proj_expr .  (27)

	.  reduce 27


state 31
	paren_expr : constant .  (44)

	.  reduce 44


state 32
	proj_expr : tuple_expr .  (29)

	.  reduce 29


state 33
	tuple_expr : function_call_expr .  (31)

	.  reduce 31


34: shift/reduce conflict (shift 61, reduce 37) on LP
state 34
	function_call_expr : function_def_expr . LP function_call_expr RP  (35)
	function_call_expr : function_def_expr .  (37)

	LP  shift 61
	$end  reduce 37
	COMMA  reduce 37
	RP  reduce 37
	THEN  reduce 37
	ELSE  reduce 37
	FI  reduce 37
	EQ  reduce 37
	GT  reduce 37
	LT  reduce 37
	DIV  reduce 37
	REM  reduce 37
	TIMES  reduce 37
	PLUS  reduce 37
	MINUS  reduce 37
	DISJ  reduce 37
	CONJ  reduce 37
	IN  reduce 37
	END  reduce 37
	SEMICOLON  reduce 37
	PARALLEL  reduce 37


state 35
	function_call_expr : let_expr .  (38)

	.  reduce 38


state 36
	let_expr : paren_expr .  (42)

	.  reduce 42


state 37
	def_unit : DEF ID . COLON type_expr EQ exp_parser  (52)

	COLON  shift 62
	.  error


state 38
	def_parser : LOCAL def_parser . IN def_parser END  (50)

	IN  shift 63
	.  error


state 39
	def_parser : def_unit SEMICOLON . def_parser  (48)

	DEF  shift 4
	LOCAL  shift 5
	.  error

	def_parser  goto 64
	def_unit  goto 7


state 40
	def_parser : def_unit PARALLEL . def_parser  (49)

	DEF  shift 4
	LOCAL  shift 5
	.  error

	def_parser  goto 65
	def_unit  goto 7


state 41
	unary_minus_expr : TILDA abs_expr .  (24)

	.  reduce 24


state 42
	or_expr : or_expr . DISJ and_expr  (3)
	tuple_sub2_expr : or_expr .  (34)
	paren_expr : LP or_expr . RP  (43)

	RP  shift 66
	DISJ  shift 51
	COMMA  reduce 34


state 43
	tuple_expr : LP tuple_sub2_expr . COMMA tuple_sub1_expr RP  (30)

	COMMA  shift 67
	.  error


state 44
	or_expr : or_expr . DISJ and_expr  (3)
	ifte_expr : IF or_expr . THEN or_expr ELSE or_expr FI  (26)

	THEN  shift 68
	DISJ  shift 51
	.  error


state 45
	abs_expr : ABS abs_expr .  (22)

	.  reduce 22


state 46
	not_expr : NOT not_expr .  (7)

	.  reduce 7


state 47
	proj_expr : PROJ LP . constant COMMA constant RP ifte_expr  (28)

	INT  shift 17
	BOOL  shift 18
	ID  shift 69
	.  error

	constant  goto 70


state 48
	let_expr : LET def_parser . IN exp_parser END  (41)

	IN  shift 71
	.  error


state 49
	function_def_expr : BACKSLASH ID . COLON type_expr DOT or_expr  (39)
	function_def_expr : BACKSLASH ID . COLON type_expr DOT LP or_expr RP  (40)

	COLON  shift 72
	.  error


state 50
	function_call_expr : ID LP . function_call_expr RP  (36)

	LP  shift 73
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	constant  goto 31
	function_call_expr  goto 74
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 51
	or_expr : or_expr DISJ . and_expr  (3)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	and_expr  goto 75
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 52
	and_expr : and_expr CONJ . not_expr  (5)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	not_expr  goto 76
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 53
	comparison_expr : comparison_expr EQ . add_sub_expr  (13)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	add_sub_expr  goto 77
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 54
	comparison_expr : comparison_expr GT . EQ add_sub_expr  (9)
	comparison_expr : comparison_expr GT . add_sub_expr  (11)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	EQ  shift 78
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	add_sub_expr  goto 79
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 55
	comparison_expr : comparison_expr LT . EQ add_sub_expr  (10)
	comparison_expr : comparison_expr LT . add_sub_expr  (12)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	EQ  shift 80
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	add_sub_expr  goto 81
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 56
	add_sub_expr : add_sub_expr PLUS . div_mult_rem_expr  (16)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	div_mult_rem_expr  goto 82
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 57
	add_sub_expr : add_sub_expr MINUS . div_mult_rem_expr  (15)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	div_mult_rem_expr  goto 83
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 58
	div_mult_rem_expr : div_mult_rem_expr DIV . abs_expr  (20)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	abs_expr  goto 84
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 59
	div_mult_rem_expr : div_mult_rem_expr REM . abs_expr  (19)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	abs_expr  goto 85
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 60
	div_mult_rem_expr : div_mult_rem_expr TIMES . abs_expr  (18)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	abs_expr  goto 86
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 61
	function_call_expr : function_def_expr LP . function_call_expr RP  (35)

	LP  shift 73
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	constant  goto 31
	function_call_expr  goto 87
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 62
	def_unit : DEF ID COLON . type_expr EQ exp_parser  (52)

	LP  shift 88
	TINT  shift 89
	TBOOL  shift 90
	TUNIT  shift 91
	.  error

	type_expr  goto 92
	type_tuple_expr  goto 93
	type_func_expr  goto 94


state 63
	def_parser : LOCAL def_parser IN . def_parser END  (50)

	DEF  shift 4
	LOCAL  shift 5
	.  error

	def_parser  goto 95
	def_unit  goto 7


state 64
	def_parser : def_unit SEMICOLON def_parser .  (48)

	.  reduce 48


state 65
	def_parser : def_unit PARALLEL def_parser .  (49)

	.  reduce 49


state 66
	paren_expr : LP or_expr RP .  (43)

	.  reduce 43


state 67
	tuple_expr : LP tuple_sub2_expr COMMA . tuple_sub1_expr RP  (30)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 96
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	tuple_sub2_expr  goto 97
	tuple_sub1_expr  goto 98
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 68
	ifte_expr : IF or_expr THEN . or_expr ELSE or_expr FI  (26)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 99
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 69
	constant : ID .  (45)

	.  reduce 45


state 70
	proj_expr : PROJ LP constant . COMMA constant RP ifte_expr  (28)

	COMMA  shift 100
	.  error


state 71
	let_expr : LET def_parser IN . exp_parser END  (41)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	EOF  shift 11
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	exp_parser  goto 101
	or_expr  goto 21
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 72
	function_def_expr : BACKSLASH ID COLON . type_expr DOT or_expr  (39)
	function_def_expr : BACKSLASH ID COLON . type_expr DOT LP or_expr RP  (40)

	LP  shift 88
	TINT  shift 89
	TBOOL  shift 90
	TUNIT  shift 91
	.  error

	type_expr  goto 102
	type_tuple_expr  goto 93
	type_func_expr  goto 94


state 73
	paren_expr : LP . or_expr RP  (43)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 103
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 74
	function_call_expr : ID LP function_call_expr . RP  (36)

	RP  shift 104
	.  error


75: shift/reduce conflict (shift 52, reduce 3) on CONJ
state 75
	or_expr : or_expr DISJ and_expr .  (3)
	and_expr : and_expr . CONJ not_expr  (5)

	CONJ  shift 52
	$end  reduce 3
	COMMA  reduce 3
	LP  reduce 3
	RP  reduce 3
	THEN  reduce 3
	ELSE  reduce 3
	FI  reduce 3
	EQ  reduce 3
	GT  reduce 3
	LT  reduce 3
	DIV  reduce 3
	REM  reduce 3
	TIMES  reduce 3
	PLUS  reduce 3
	MINUS  reduce 3
	DISJ  reduce 3
	IN  reduce 3
	END  reduce 3
	SEMICOLON  reduce 3
	PARALLEL  reduce 3


state 76
	and_expr : and_expr CONJ not_expr .  (5)

	.  reduce 5


77: shift/reduce conflict (shift 56, reduce 13) on PLUS
77: shift/reduce conflict (shift 57, reduce 13) on MINUS
state 77
	comparison_expr : comparison_expr EQ add_sub_expr .  (13)
	add_sub_expr : add_sub_expr . MINUS div_mult_rem_expr  (15)
	add_sub_expr : add_sub_expr . PLUS div_mult_rem_expr  (16)

	PLUS  shift 56
	MINUS  shift 57
	$end  reduce 13
	COMMA  reduce 13
	LP  reduce 13
	RP  reduce 13
	THEN  reduce 13
	ELSE  reduce 13
	FI  reduce 13
	EQ  reduce 13
	GT  reduce 13
	LT  reduce 13
	DIV  reduce 13
	REM  reduce 13
	TIMES  reduce 13
	DISJ  reduce 13
	CONJ  reduce 13
	IN  reduce 13
	END  reduce 13
	SEMICOLON  reduce 13
	PARALLEL  reduce 13


state 78
	comparison_expr : comparison_expr GT EQ . add_sub_expr  (9)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	add_sub_expr  goto 105
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


79: shift/reduce conflict (shift 56, reduce 11) on PLUS
79: shift/reduce conflict (shift 57, reduce 11) on MINUS
state 79
	comparison_expr : comparison_expr GT add_sub_expr .  (11)
	add_sub_expr : add_sub_expr . MINUS div_mult_rem_expr  (15)
	add_sub_expr : add_sub_expr . PLUS div_mult_rem_expr  (16)

	PLUS  shift 56
	MINUS  shift 57
	$end  reduce 11
	COMMA  reduce 11
	LP  reduce 11
	RP  reduce 11
	THEN  reduce 11
	ELSE  reduce 11
	FI  reduce 11
	EQ  reduce 11
	GT  reduce 11
	LT  reduce 11
	DIV  reduce 11
	REM  reduce 11
	TIMES  reduce 11
	DISJ  reduce 11
	CONJ  reduce 11
	IN  reduce 11
	END  reduce 11
	SEMICOLON  reduce 11
	PARALLEL  reduce 11


state 80
	comparison_expr : comparison_expr LT EQ . add_sub_expr  (10)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	add_sub_expr  goto 106
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


81: shift/reduce conflict (shift 56, reduce 12) on PLUS
81: shift/reduce conflict (shift 57, reduce 12) on MINUS
state 81
	comparison_expr : comparison_expr LT add_sub_expr .  (12)
	add_sub_expr : add_sub_expr . MINUS div_mult_rem_expr  (15)
	add_sub_expr : add_sub_expr . PLUS div_mult_rem_expr  (16)

	PLUS  shift 56
	MINUS  shift 57
	$end  reduce 12
	COMMA  reduce 12
	LP  reduce 12
	RP  reduce 12
	THEN  reduce 12
	ELSE  reduce 12
	FI  reduce 12
	EQ  reduce 12
	GT  reduce 12
	LT  reduce 12
	DIV  reduce 12
	REM  reduce 12
	TIMES  reduce 12
	DISJ  reduce 12
	CONJ  reduce 12
	IN  reduce 12
	END  reduce 12
	SEMICOLON  reduce 12
	PARALLEL  reduce 12


82: shift/reduce conflict (shift 58, reduce 16) on DIV
82: shift/reduce conflict (shift 59, reduce 16) on REM
82: shift/reduce conflict (shift 60, reduce 16) on TIMES
state 82
	add_sub_expr : add_sub_expr PLUS div_mult_rem_expr .  (16)
	div_mult_rem_expr : div_mult_rem_expr . TIMES abs_expr  (18)
	div_mult_rem_expr : div_mult_rem_expr . REM abs_expr  (19)
	div_mult_rem_expr : div_mult_rem_expr . DIV abs_expr  (20)

	DIV  shift 58
	REM  shift 59
	TIMES  shift 60
	$end  reduce 16
	COMMA  reduce 16
	LP  reduce 16
	RP  reduce 16
	THEN  reduce 16
	ELSE  reduce 16
	FI  reduce 16
	EQ  reduce 16
	GT  reduce 16
	LT  reduce 16
	PLUS  reduce 16
	MINUS  reduce 16
	DISJ  reduce 16
	CONJ  reduce 16
	IN  reduce 16
	END  reduce 16
	SEMICOLON  reduce 16
	PARALLEL  reduce 16


83: shift/reduce conflict (shift 58, reduce 15) on DIV
83: shift/reduce conflict (shift 59, reduce 15) on REM
83: shift/reduce conflict (shift 60, reduce 15) on TIMES
state 83
	add_sub_expr : add_sub_expr MINUS div_mult_rem_expr .  (15)
	div_mult_rem_expr : div_mult_rem_expr . TIMES abs_expr  (18)
	div_mult_rem_expr : div_mult_rem_expr . REM abs_expr  (19)
	div_mult_rem_expr : div_mult_rem_expr . DIV abs_expr  (20)

	DIV  shift 58
	REM  shift 59
	TIMES  shift 60
	$end  reduce 15
	COMMA  reduce 15
	LP  reduce 15
	RP  reduce 15
	THEN  reduce 15
	ELSE  reduce 15
	FI  reduce 15
	EQ  reduce 15
	GT  reduce 15
	LT  reduce 15
	PLUS  reduce 15
	MINUS  reduce 15
	DISJ  reduce 15
	CONJ  reduce 15
	IN  reduce 15
	END  reduce 15
	SEMICOLON  reduce 15
	PARALLEL  reduce 15


state 84
	div_mult_rem_expr : div_mult_rem_expr DIV abs_expr .  (20)

	.  reduce 20


state 85
	div_mult_rem_expr : div_mult_rem_expr REM abs_expr .  (19)

	.  reduce 19


state 86
	div_mult_rem_expr : div_mult_rem_expr TIMES abs_expr .  (18)

	.  reduce 18


state 87
	function_call_expr : function_def_expr LP function_call_expr . RP  (35)

	RP  shift 107
	.  error


state 88
	type_tuple_expr : LP . type_expr TIMES type_tuple_sub1_expr RP  (58)

	LP  shift 88
	TINT  shift 89
	TBOOL  shift 90
	TUNIT  shift 91
	.  error

	type_expr  goto 108
	type_tuple_expr  goto 93
	type_func_expr  goto 94


state 89
	type_expr : TINT .  (53)

	.  reduce 53


state 90
	type_expr : TBOOL .  (54)

	.  reduce 54


state 91
	type_expr : TUNIT .  (55)

	.  reduce 55


state 92
	def_unit : DEF ID COLON type_expr . EQ exp_parser  (52)
	type_func_expr : type_expr . ARROW type_expr  (61)

	EQ  shift 109
	ARROW  shift 110
	.  error


state 93
	type_expr : type_tuple_expr .  (56)

	.  reduce 56


state 94
	type_expr : type_func_expr .  (57)

	.  reduce 57


state 95
	def_parser : LOCAL def_parser IN def_parser . END  (50)

	END  shift 111
	.  error


state 96
	or_expr : or_expr . DISJ and_expr  (3)
	tuple_sub2_expr : or_expr .  (34)

	DISJ  shift 51
	COMMA  reduce 34
	RP  reduce 34


state 97
	tuple_sub1_expr : tuple_sub2_expr . COMMA tuple_sub1_expr  (32)
	tuple_sub1_expr : tuple_sub2_expr .  (33)

	COMMA  shift 112
	RP  reduce 33


state 98
	tuple_expr : LP tuple_sub2_expr COMMA tuple_sub1_expr . RP  (30)

	RP  shift 113
	.  error


state 99
	or_expr : or_expr . DISJ and_expr  (3)
	ifte_expr : IF or_expr THEN or_expr . ELSE or_expr FI  (26)

	ELSE  shift 114
	DISJ  shift 51
	.  error


state 100
	proj_expr : PROJ LP constant COMMA . constant RP ifte_expr  (28)

	INT  shift 17
	BOOL  shift 18
	ID  shift 69
	.  error

	constant  goto 115


state 101
	let_expr : LET def_parser IN exp_parser . END  (41)

	END  shift 116
	.  error


state 102
	function_def_expr : BACKSLASH ID COLON type_expr . DOT or_expr  (39)
	function_def_expr : BACKSLASH ID COLON type_expr . DOT LP or_expr RP  (40)
	type_func_expr : type_expr . ARROW type_expr  (61)

	DOT  shift 117
	ARROW  shift 110
	.  error


state 103
	or_expr : or_expr . DISJ and_expr  (3)
	paren_expr : LP or_expr . RP  (43)

	RP  shift 66
	DISJ  shift 51
	.  error


state 104
	function_call_expr : ID LP function_call_expr RP .  (36)

	.  reduce 36


105: shift/reduce conflict (shift 56, reduce 9) on PLUS
105: shift/reduce conflict (shift 57, reduce 9) on MINUS
state 105
	comparison_expr : comparison_expr GT EQ add_sub_expr .  (9)
	add_sub_expr : add_sub_expr . MINUS div_mult_rem_expr  (15)
	add_sub_expr : add_sub_expr . PLUS div_mult_rem_expr  (16)

	PLUS  shift 56
	MINUS  shift 57
	$end  reduce 9
	COMMA  reduce 9
	LP  reduce 9
	RP  reduce 9
	THEN  reduce 9
	ELSE  reduce 9
	FI  reduce 9
	EQ  reduce 9
	GT  reduce 9
	LT  reduce 9
	DIV  reduce 9
	REM  reduce 9
	TIMES  reduce 9
	DISJ  reduce 9
	CONJ  reduce 9
	IN  reduce 9
	END  reduce 9
	SEMICOLON  reduce 9
	PARALLEL  reduce 9


106: shift/reduce conflict (shift 56, reduce 10) on PLUS
106: shift/reduce conflict (shift 57, reduce 10) on MINUS
state 106
	comparison_expr : comparison_expr LT EQ add_sub_expr .  (10)
	add_sub_expr : add_sub_expr . MINUS div_mult_rem_expr  (15)
	add_sub_expr : add_sub_expr . PLUS div_mult_rem_expr  (16)

	PLUS  shift 56
	MINUS  shift 57
	$end  reduce 10
	COMMA  reduce 10
	LP  reduce 10
	RP  reduce 10
	THEN  reduce 10
	ELSE  reduce 10
	FI  reduce 10
	EQ  reduce 10
	GT  reduce 10
	LT  reduce 10
	DIV  reduce 10
	REM  reduce 10
	TIMES  reduce 10
	DISJ  reduce 10
	CONJ  reduce 10
	IN  reduce 10
	END  reduce 10
	SEMICOLON  reduce 10
	PARALLEL  reduce 10


state 107
	function_call_expr : function_def_expr LP function_call_expr RP .  (35)

	.  reduce 35


state 108
	type_tuple_expr : LP type_expr . TIMES type_tuple_sub1_expr RP  (58)
	type_func_expr : type_expr . ARROW type_expr  (61)

	TIMES  shift 118
	ARROW  shift 110
	.  error


state 109
	def_unit : DEF ID COLON type_expr EQ . exp_parser  (52)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	EOF  shift 11
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	exp_parser  goto 119
	or_expr  goto 21
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 110
	type_func_expr : type_expr ARROW . type_expr  (61)

	LP  shift 88
	TINT  shift 89
	TBOOL  shift 90
	TUNIT  shift 91
	.  error

	type_expr  goto 120
	type_tuple_expr  goto 93
	type_func_expr  goto 94


state 111
	def_parser : LOCAL def_parser IN def_parser END .  (50)

	.  reduce 50


state 112
	tuple_sub1_expr : tuple_sub2_expr COMMA . tuple_sub1_expr  (32)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 96
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	tuple_sub2_expr  goto 97
	tuple_sub1_expr  goto 121
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 113
	tuple_expr : LP tuple_sub2_expr COMMA tuple_sub1_expr RP .  (30)

	.  reduce 30


state 114
	ifte_expr : IF or_expr THEN or_expr ELSE . or_expr FI  (26)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 122
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 115
	proj_expr : PROJ LP constant COMMA constant . RP ifte_expr  (28)

	RP  shift 123
	.  error


state 116
	let_expr : LET def_parser IN exp_parser END .  (41)

	.  reduce 41


state 117
	function_def_expr : BACKSLASH ID COLON type_expr DOT . or_expr  (39)
	function_def_expr : BACKSLASH ID COLON type_expr DOT . LP or_expr RP  (40)

	TILDA  shift 8
	LP  shift 124
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 125
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 118
	type_tuple_expr : LP type_expr TIMES . type_tuple_sub1_expr RP  (58)

	LP  shift 88
	TINT  shift 89
	TBOOL  shift 90
	TUNIT  shift 91
	.  error

	type_expr  goto 126
	type_tuple_expr  goto 93
	type_func_expr  goto 94
	type_tuple_sub1_expr  goto 127


state 119
	def_unit : DEF ID COLON type_expr EQ exp_parser .  (52)

	.  reduce 52


120: shift/reduce conflict (shift 110, reduce 61) on ARROW
state 120
	type_func_expr : type_expr . ARROW type_expr  (61)
	type_func_expr : type_expr ARROW type_expr .  (61)

	ARROW  shift 110
	RP  reduce 61
	EQ  reduce 61
	TIMES  reduce 61
	DOT  reduce 61


state 121
	tuple_sub1_expr : tuple_sub2_expr COMMA tuple_sub1_expr .  (32)

	.  reduce 32


state 122
	or_expr : or_expr . DISJ and_expr  (3)
	ifte_expr : IF or_expr THEN or_expr ELSE or_expr . FI  (26)

	FI  shift 128
	DISJ  shift 51
	.  error


state 123
	proj_expr : PROJ LP constant COMMA constant RP . ifte_expr  (28)

	LP  shift 9
	IF  shift 10
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	ifte_expr  goto 129
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


state 124
	tuple_expr : LP . tuple_sub2_expr COMMA tuple_sub1_expr RP  (30)
	function_def_expr : BACKSLASH ID COLON type_expr DOT LP . or_expr RP  (40)
	paren_expr : LP . or_expr RP  (43)

	TILDA  shift 8
	LP  shift 9
	IF  shift 10
	ABS  shift 12
	NOT  shift 13
	PROJ  shift 14
	LET  shift 15
	BACKSLASH  shift 16
	INT  shift 17
	BOOL  shift 18
	ID  shift 19
	.  error

	or_expr  goto 130
	and_expr  goto 22
	not_expr  goto 23
	comparison_expr  goto 24
	add_sub_expr  goto 25
	div_mult_rem_expr  goto 26
	abs_expr  goto 27
	unary_minus_expr  goto 28
	ifte_expr  goto 29
	proj_expr  goto 30
	constant  goto 31
	tuple_expr  goto 32
	tuple_sub2_expr  goto 43
	function_call_expr  goto 33
	function_def_expr  goto 34
	let_expr  goto 35
	paren_expr  goto 36


125: shift/reduce conflict (shift 51, reduce 39) on DISJ
state 125
	or_expr : or_expr . DISJ and_expr  (3)
	function_def_expr : BACKSLASH ID COLON type_expr DOT or_expr .  (39)

	DISJ  shift 51
	$end  reduce 39
	COMMA  reduce 39
	LP  reduce 39
	RP  reduce 39
	THEN  reduce 39
	ELSE  reduce 39
	FI  reduce 39
	EQ  reduce 39
	GT  reduce 39
	LT  reduce 39
	DIV  reduce 39
	REM  reduce 39
	TIMES  reduce 39
	PLUS  reduce 39
	MINUS  reduce 39
	CONJ  reduce 39
	IN  reduce 39
	END  reduce 39
	SEMICOLON  reduce 39
	PARALLEL  reduce 39


state 126
	type_tuple_sub1_expr : type_expr . TIMES type_tuple_sub1_expr  (59)
	type_tuple_sub1_expr : type_expr .  (60)
	type_func_expr : type_expr . ARROW type_expr  (61)

	TIMES  shift 131
	ARROW  shift 110
	RP  reduce 60


state 127
	type_tuple_expr : LP type_expr TIMES type_tuple_sub1_expr . RP  (58)

	RP  shift 132
	.  error


state 128
	ifte_expr : IF or_expr THEN or_expr ELSE or_expr FI .  (26)

	.  reduce 26


state 129
	proj_expr : PROJ LP constant COMMA constant RP ifte_expr .  (28)

	.  reduce 28


state 130
	or_expr : or_expr . DISJ and_expr  (3)
	tuple_sub2_expr : or_expr .  (34)
	function_def_expr : BACKSLASH ID COLON type_expr DOT LP or_expr . RP  (40)
	paren_expr : LP or_expr . RP  (43)

	RP  shift 133
	DISJ  shift 51
	COMMA  reduce 34


state 131
	type_tuple_sub1_expr : type_expr TIMES . type_tuple_sub1_expr  (59)

	LP  shift 88
	TINT  shift 89
	TBOOL  shift 90
	TUNIT  shift 91
	.  error

	type_expr  goto 126
	type_tuple_expr  goto 93
	type_func_expr  goto 94
	type_tuple_sub1_expr  goto 134


state 132
	type_tuple_expr : LP type_expr TIMES type_tuple_sub1_expr RP .  (58)

	.  reduce 58


133: reduce/reduce conflict (reduce 40, reduce 43) on $end
133: reduce/reduce conflict (reduce 40, reduce 43) on COMMA
133: reduce/reduce conflict (reduce 40, reduce 43) on LP
133: reduce/reduce conflict (reduce 40, reduce 43) on RP
133: reduce/reduce conflict (reduce 40, reduce 43) on THEN
133: reduce/reduce conflict (reduce 40, reduce 43) on ELSE
133: reduce/reduce conflict (reduce 40, reduce 43) on FI
133: reduce/reduce conflict (reduce 40, reduce 43) on EQ
133: reduce/reduce conflict (reduce 40, reduce 43) on GT
133: reduce/reduce conflict (reduce 40, reduce 43) on LT
133: reduce/reduce conflict (reduce 40, reduce 43) on DIV
133: reduce/reduce conflict (reduce 40, reduce 43) on REM
133: reduce/reduce conflict (reduce 40, reduce 43) on TIMES
133: reduce/reduce conflict (reduce 40, reduce 43) on PLUS
133: reduce/reduce conflict (reduce 40, reduce 43) on MINUS
133: reduce/reduce conflict (reduce 40, reduce 43) on DISJ
133: reduce/reduce conflict (reduce 40, reduce 43) on CONJ
133: reduce/reduce conflict (reduce 40, reduce 43) on IN
133: reduce/reduce conflict (reduce 40, reduce 43) on END
133: reduce/reduce conflict (reduce 40, reduce 43) on SEMICOLON
133: reduce/reduce conflict (reduce 40, reduce 43) on PARALLEL
state 133
	function_def_expr : BACKSLASH ID COLON type_expr DOT LP or_expr RP .  (40)
	paren_expr : LP or_expr RP .  (43)

	.  reduce 40


state 134
	type_tuple_sub1_expr : type_expr TIMES type_tuple_sub1_expr .  (59)

	.  reduce 59


State 19 contains 1 shift/reduce conflict.
State 22 contains 1 shift/reduce conflict.
State 24 contains 3 shift/reduce conflicts.
State 25 contains 2 shift/reduce conflicts.
State 26 contains 3 shift/reduce conflicts.
State 34 contains 1 shift/reduce conflict.
State 75 contains 1 shift/reduce conflict.
State 77 contains 2 shift/reduce conflicts.
State 79 contains 2 shift/reduce conflicts.
State 81 contains 2 shift/reduce conflicts.
State 82 contains 3 shift/reduce conflicts.
State 83 contains 3 shift/reduce conflicts.
State 105 contains 2 shift/reduce conflicts.
State 106 contains 2 shift/reduce conflicts.
State 120 contains 1 shift/reduce conflict.
State 125 contains 1 shift/reduce conflict.
State 133 contains 21 reduce/reduce conflicts.


45 terminals, 27 nonterminals
64 grammar rules, 135 states
