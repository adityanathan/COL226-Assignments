type token =
  | COMMA
  | TILDA
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | DELIMITER
  | EOF
  | EQ
  | GT
  | LT
  | ABS
  | EXP
  | DIV
  | REM
  | TIMES
  | PLUS
  | MINUS
  | DISJ
  | CONJ
  | NOT
  | PROJ
  | INT of (int)
  | ID of (string)
  | BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
    exception Tuple_value_not_an_integer
    exception Empty_Expression
    let extract_int x = match x with
      N (a) -> a
    | _     -> raise Tuple_value_not_an_integer
# 40 "a3.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* TILDA *);
  259 (* LP *);
  260 (* RP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* FI *);
  265 (* DELIMITER *);
    0 (* EOF *);
  266 (* EQ *);
  267 (* GT *);
  268 (* LT *);
  269 (* ABS *);
  270 (* EXP *);
  271 (* DIV *);
  272 (* REM *);
  273 (* TIMES *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* DISJ *);
  277 (* CONJ *);
  278 (* NOT *);
  279 (* PROJ *);
    0|]

let yytransl_block = [|
  280 (* INT *);
  281 (* ID *);
  282 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\004\000\
\004\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\006\000\007\000\007\000\007\000\007\000\008\000\008\000\
\009\000\009\000\010\000\010\000\011\000\011\000\013\000\013\000\
\015\000\015\000\014\000\014\000\016\000\016\000\012\000\012\000\
\012\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\001\000\003\000\001\000\002\000\
\001\000\004\000\004\000\003\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\003\000\001\000\002\000\001\000\
\002\000\001\000\007\000\001\000\007\000\001\000\005\000\001\000\
\003\000\001\000\001\000\001\000\003\000\001\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\040\000\039\000\041\000\042\000\000\000\000\000\007\000\
\000\000\000\000\000\000\022\000\024\000\026\000\028\000\038\000\
\030\000\032\000\025\000\000\000\000\000\032\000\000\000\023\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\020\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\033\000\000\000\000\000\027\000\029\000"

let yydgoto = "\002\000\
\013\000\062\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\063\000\064\000\026\000"

let yysindex = "\007\000\
\001\000\000\000\061\255\008\255\008\255\000\000\057\255\052\255\
\033\255\000\000\000\000\000\000\000\000\026\255\028\255\000\000\
\032\255\252\254\080\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\255\051\255\000\000\006\255\000\000\
\032\255\079\255\000\000\008\255\008\255\052\255\015\255\048\255\
\052\255\052\255\052\255\052\255\052\255\000\000\008\255\008\255\
\055\255\028\255\000\000\252\254\052\255\252\254\052\255\252\254\
\080\255\080\255\000\000\000\000\000\000\043\255\067\255\085\255\
\009\255\079\255\252\254\252\254\008\255\000\000\008\255\094\255\
\000\000\255\254\076\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\198\000\000\000\
\180\000\009\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\105\255\000\000\000\000\000\000\000\000\
\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\207\000\000\000\090\000\000\000\108\000\000\000\126\000\
\048\000\069\000\000\000\000\000\000\000\087\255\109\255\000\000\
\000\000\000\000\144\000\162\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\078\000\079\000\107\000\054\000\238\255\067\000\
\110\000\115\000\000\000\227\255\044\000\116\000\052\000\254\255"

let yytablesize = 483
let yytable = "\014\000\
\006\000\030\000\028\000\031\000\049\000\046\000\076\000\001\000\
\015\000\003\000\004\000\048\000\005\000\041\000\042\000\071\000\
\003\000\004\000\036\000\005\000\007\000\036\000\057\000\058\000\
\053\000\036\000\018\000\007\000\036\000\008\000\009\000\010\000\
\011\000\012\000\035\000\034\000\072\000\009\000\010\000\011\000\
\012\000\038\000\039\000\040\000\030\000\036\000\065\000\017\000\
\037\000\003\000\004\000\047\000\005\000\003\000\004\000\066\000\
\005\000\055\000\003\000\004\000\007\000\005\000\036\000\004\000\
\007\000\005\000\030\000\069\000\016\000\074\000\009\000\010\000\
\011\000\012\000\009\000\010\000\011\000\012\000\004\000\009\000\
\010\000\011\000\012\000\009\000\010\000\011\000\012\000\035\000\
\070\000\014\000\035\000\052\000\054\000\056\000\043\000\044\000\
\045\000\075\000\002\000\010\000\011\000\012\000\010\000\011\000\
\012\000\035\000\067\000\012\000\068\000\059\000\060\000\061\000\
\034\000\050\000\033\000\051\000\032\000\027\000\077\000\029\000\
\073\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\005\000\000\000\000\000\
\000\000\015\000\000\000\000\000\015\000\007\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\000\000\008\000\009\000\
\010\000\011\000\012\000\018\000\015\000\015\000\018\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\017\000\000\000\000\000\017\000\000\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\000\000\000\000\000\000\
\000\000\017\000\017\000\017\000\017\000\016\000\000\000\000\000\
\016\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\014\000\000\000\000\000\014\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\014\000\014\000\012\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\012\000\
\012\000\013\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\013\000\013\000\010\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\010\000\010\000\011\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\011\000\011\000\009\000\
\000\000\009\000\009\000\009\000\009\000\008\000\000\000\000\000\
\008\000\000\000\008\000\008\000\008\000\008\000\005\000\009\000\
\009\000\005\000\000\000\005\000\005\000\005\000\005\000\004\000\
\008\000\008\000\004\000\000\000\004\000\004\000\004\000\004\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000"

let yycheck = "\001\000\
\000\000\004\000\004\000\005\000\034\000\004\001\008\001\001\000\
\000\000\002\001\003\001\006\001\005\001\018\001\019\001\007\001\
\002\001\003\001\020\001\005\001\013\001\020\001\041\000\042\000\
\010\001\020\001\000\000\013\001\020\001\022\001\023\001\024\001\
\025\001\026\001\009\001\003\001\066\000\023\001\024\001\025\001\
\026\001\010\001\011\001\012\001\047\000\020\001\048\000\000\000\
\021\001\002\001\003\001\001\001\005\001\002\001\003\001\001\001\
\005\001\010\001\002\001\003\001\013\001\005\001\020\001\003\001\
\013\001\005\001\069\000\001\001\000\000\071\000\023\001\024\001\
\025\001\026\001\023\001\024\001\025\001\026\001\003\001\023\001\
\024\001\025\001\026\001\023\001\024\001\025\001\026\001\001\001\
\004\001\000\000\004\001\038\000\039\000\040\000\015\001\016\001\
\017\001\004\001\000\000\024\001\025\001\026\001\024\001\025\001\
\026\001\001\001\053\000\000\000\055\000\043\000\044\000\045\000\
\004\001\036\000\008\000\037\000\007\000\003\000\075\000\004\000\
\069\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\013\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\022\001\023\001\
\024\001\025\001\026\001\001\001\020\001\021\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\001\001\255\255\255\255\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\001\001\255\255\255\255\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\001\001\255\255\255\255\004\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\020\001\021\001\004\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\020\001\
\021\001\004\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\020\001\021\001\004\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\020\001\021\001\004\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\020\001\021\001\004\001\
\255\255\006\001\007\001\008\001\009\001\001\001\255\255\255\255\
\004\001\255\255\006\001\007\001\008\001\009\001\001\001\020\001\
\021\001\004\001\255\255\006\001\007\001\008\001\009\001\001\001\
\020\001\021\001\004\001\255\255\006\001\007\001\008\001\009\001\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001"

let yynames_const = "\
  COMMA\000\
  TILDA\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  DELIMITER\000\
  EOF\000\
  EQ\000\
  GT\000\
  LT\000\
  ABS\000\
  EXP\000\
  DIV\000\
  REM\000\
  TIMES\000\
  PLUS\000\
  MINUS\000\
  DISJ\000\
  CONJ\000\
  NOT\000\
  PROJ\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 25 "a3.mly"
                                                    ( _1 )
# 301 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 26 "a3.mly"
                                                    ( _1 )
# 308 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "a3.mly"
                                                    ( raise Empty_Expression )
# 314 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 31 "a3.mly"
                                                    (Disjunction (_1, _3))
# 322 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 32 "a3.mly"
                                                    (_1)
# 329 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 36 "a3.mly"
                                                    (Conjunction (_1, _3))
# 337 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 37 "a3.mly"
                                                    (_1)
# 344 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 41 "a3.mly"
                                                    (Not (_2))
# 351 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 42 "a3.mly"
                                                    (_1)
# 358 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 46 "a3.mly"
                                                    (GreaterTE (_1, _4))
# 366 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 47 "a3.mly"
                                                    (LessTE (_1, _4))
# 374 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 48 "a3.mly"
                                                    (GreaterT (_1, _3))
# 382 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 49 "a3.mly"
                                                    (LessT (_1, _3))
# 390 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 50 "a3.mly"
                                                    (Equals (_1, _3))
# 398 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_expr) in
    Obj.repr(
# 51 "a3.mly"
                                                    (_1)
# 405 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 55 "a3.mly"
                                                    (Sub (_1, _3))
# 413 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 56 "a3.mly"
                                                    (Add (_1, _3))
# 421 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_rem_expr) in
    Obj.repr(
# 57 "a3.mly"
                                                    (_1)
# 428 "a3.ml"
               : 'add_sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 61 "a3.mly"
                                                    (Mult (_1, _3))
# 436 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 62 "a3.mly"
                                                    (Rem (_1, _3))
# 444 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_mult_rem_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 63 "a3.mly"
                                                    (Div (_1, _3))
# 452 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 64 "a3.mly"
                                                    (_1)
# 459 "a3.ml"
               : 'div_mult_rem_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_minus_expr) in
    Obj.repr(
# 71 "a3.mly"
                                                    (Abs (_2))
# 466 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_minus_expr) in
    Obj.repr(
# 72 "a3.mly"
                                                    (_1)
# 473 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 76 "a3.mly"
                                                    (Negative(_2))
# 480 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 77 "a3.mly"
                                                    (_1)
# 487 "a3.ml"
               : 'unary_minus_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'or_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 81 "a3.mly"
                                                    (IfThenElse(_2,_4,_6))
# 496 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expr) in
    Obj.repr(
# 82 "a3.mly"
                                                    (_1)
# 503 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'constant) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'constant) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 85 "a3.mly"
                                                    (Project ((extract_int _3, extract_int _5),_7))
# 512 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 86 "a3.mly"
                                                    (_1)
# 519 "a3.ml"
               : 'proj_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tuple_sub2_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tuple_sub1_expr) in
    Obj.repr(
# 89 "a3.mly"
                                                    (Tuple (((List.length _4)+1), (_2::_4)))
# 527 "a3.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 90 "a3.mly"
                                                    (_1)
# 534 "a3.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tuple_sub2_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_sub1_expr) in
    Obj.repr(
# 93 "a3.mly"
                                                    (_1::_3)
# 542 "a3.ml"
               : 'tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_sub2_expr) in
    Obj.repr(
# 94 "a3.mly"
                                                    ([_1])
# 549 "a3.ml"
               : 'tuple_sub1_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 97 "a3.mly"
                                                    (_1)
# 556 "a3.ml"
               : 'tuple_sub2_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 98 "a3.mly"
                                                    (_1)
# 563 "a3.ml"
               : 'tuple_sub2_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 101 "a3.mly"
                                                    (InParen(_2))
# 570 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 102 "a3.mly"
                                                    (_1)
# 577 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "a3.mly"
                                                    (Var (_1))
# 584 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 107 "a3.mly"
                                                    (N (_1))
# 591 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 108 "a3.mly"
                                                    (B (_1))
# 598 "a3.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
