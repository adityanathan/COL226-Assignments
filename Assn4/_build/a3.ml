type token =
  | COMMA
  | TILDA
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | DELIMITER
  | EOF
  | EQ
  | GTA
  | LTA
  | ABS
  | EXP
  | DIV
  | MOD
  | MUL
  | PLUS
  | MINUS
  | AND
  | OR
  | NOT
  | INT of (int)
  | ID of (string)
  | BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 34 "a3.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* TILDA *);
  259 (* LP *);
  260 (* RP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* FI *);
  265 (* DELIMITER *);
    0 (* EOF *);
  266 (* EQ *);
  267 (* GTA *);
  268 (* LTA *);
  269 (* ABS *);
  270 (* EXP *);
  271 (* DIV *);
  272 (* MOD *);
  273 (* MUL *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* AND *);
  277 (* OR *);
  278 (* NOT *);
    0|]

let yytransl_block = [|
  279 (* INT *);
  280 (* ID *);
  281 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\004\000\
\004\000\005\000\005\000\006\000\006\000\007\000\007\000\008\000\
\008\000\009\000\009\000\010\000\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\002\000\
\001\000\003\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\003\000\000\000\021\000\020\000\022\000\
\023\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\017\000\019\000\000\000\016\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\012\000\014\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000"

let yysindex = "\008\000\
\001\000\000\000\253\254\000\000\002\255\000\000\000\000\000\000\
\000\000\250\254\249\254\251\254\254\254\000\255\000\000\003\255\
\000\000\000\000\004\255\000\000\000\000\253\254\253\254\253\254\
\253\254\253\254\253\254\000\000\249\254\251\254\254\254\000\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\004\000\047\000\035\000\018\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\053\000\041\000\024\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\025\000\253\255\006\000\007\000\005\000\236\255\000\000\
\027\000\000\000"

let yytablesize = 334
let yytable = "\003\000\
\004\000\015\000\021\000\005\000\003\000\033\000\034\000\028\000\
\001\000\005\000\023\000\024\000\022\000\025\000\026\000\002\000\
\027\000\011\000\029\000\006\000\007\000\008\000\022\000\010\000\
\006\000\007\000\008\000\019\000\030\000\032\000\031\000\020\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\015\000\000\000\005\000\
\000\000\000\000\015\000\000\000\005\000\005\000\000\000\000\000\
\015\000\015\000\015\000\015\000\015\000\011\000\005\000\006\000\
\007\000\008\000\011\000\010\000\000\000\000\000\000\000\000\000\
\010\000\011\000\011\000\011\000\011\000\000\000\009\000\010\000\
\010\000\010\000\010\000\009\000\008\000\000\000\000\000\000\000\
\000\000\008\000\007\000\009\000\009\000\009\000\000\000\007\000\
\006\000\008\000\008\000\008\000\000\000\006\000\004\000\000\000\
\007\000\007\000\000\000\004\000\000\000\000\000\006\000\006\000\
\000\000\000\000\000\000\000\000\000\000\004\000"

let yycheck = "\003\001\
\000\000\000\000\009\001\000\000\003\001\026\000\027\000\004\001\
\001\000\013\001\018\001\017\001\019\001\016\001\015\001\000\000\
\014\001\000\000\022\000\023\001\024\001\025\001\019\001\000\000\
\023\001\024\001\025\001\003\000\023\000\025\000\024\000\005\000\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\004\001\255\255\004\001\
\255\255\255\255\009\001\255\255\009\001\013\001\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\004\001\019\001\023\001\
\024\001\025\001\009\001\004\001\255\255\255\255\255\255\255\255\
\009\001\016\001\017\001\018\001\019\001\255\255\004\001\016\001\
\017\001\018\001\019\001\009\001\004\001\255\255\255\255\255\255\
\255\255\009\001\004\001\017\001\018\001\019\001\255\255\009\001\
\004\001\017\001\018\001\019\001\255\255\009\001\004\001\255\255\
\018\001\019\001\255\255\009\001\255\255\255\255\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\019\001"

let yynames_const = "\
  COMMA\000\
  TILDA\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  DELIMITER\000\
  EOF\000\
  EQ\000\
  GTA\000\
  LTA\000\
  ABS\000\
  EXP\000\
  DIV\000\
  MOD\000\
  MUL\000\
  PLUS\000\
  MINUS\000\
  AND\000\
  OR\000\
  NOT\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sub_expr) in
    Obj.repr(
# 20 "a3.mly"
                                               ( _1 )
# 234 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 21 "a3.mly"
                                               ( _1 )
# 241 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "a3.mly"
                                                ( Done )
# 247 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_expr) in
    Obj.repr(
# 30 "a3.mly"
                                                (Sub (_1, _3))
# 255 "a3.ml"
               : 'sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_expr) in
    Obj.repr(
# 31 "a3.mly"
                                                (_1)
# 262 "a3.ml"
               : 'sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expr) in
    Obj.repr(
# 34 "a3.mly"
                                                (Add (_1, _3))
# 270 "a3.ml"
               : 'add_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expr) in
    Obj.repr(
# 35 "a3.mly"
                                                (_1)
# 277 "a3.ml"
               : 'add_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mod_expr) in
    Obj.repr(
# 38 "a3.mly"
                                                (Mult (_1, _3))
# 285 "a3.ml"
               : 'mult_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_expr) in
    Obj.repr(
# 39 "a3.mly"
                                                (_1)
# 292 "a3.ml"
               : 'mult_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expr) in
    Obj.repr(
# 42 "a3.mly"
                                                (Rem (_1, _3))
# 300 "a3.ml"
               : 'mod_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expr) in
    Obj.repr(
# 43 "a3.mly"
                                                (_1)
# 307 "a3.ml"
               : 'mod_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exponent_expr) in
    Obj.repr(
# 46 "a3.mly"
                                                (Div (_1, _3))
# 315 "a3.ml"
               : 'div_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exponent_expr) in
    Obj.repr(
# 47 "a3.mly"
                                                (_1)
# 322 "a3.ml"
               : 'div_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'abs_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exponent_expr) in
    Obj.repr(
# 50 "a3.mly"
                                                (Exp (_1, _3))
# 330 "a3.ml"
               : 'exponent_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 51 "a3.mly"
                                                (_1)
# 337 "a3.ml"
               : 'exponent_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 54 "a3.mly"
                                           (Abs (_2))
# 344 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 55 "a3.mly"
                                           (_1)
# 351 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sub_expr) in
    Obj.repr(
# 81 "a3.mly"
                                             (InParen(_2))
# 358 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 82 "a3.mly"
                                                (_1)
# 365 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "a3.mly"
                                                (Var (_1))
# 372 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 86 "a3.mly"
                                                (N (_1))
# 379 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 87 "a3.mly"
                                                (B (_1))
# 386 "a3.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
