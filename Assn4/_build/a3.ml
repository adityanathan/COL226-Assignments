type token =
  | COMMA
  | TILDA
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | DELIMITER
  | EOF
  | EQ
  | GTA
  | LTA
  | ABS
  | EXP
  | DIV
  | MOD
  | MUL
  | PLUS
  | MINUS
  | AND
  | OR
  | NOT
  | INT of (int)
  | ID of (string)
  | BOOL of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 34 "a3.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* TILDA *);
  259 (* LP *);
  260 (* RP *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* FI *);
  265 (* DELIMITER *);
    0 (* EOF *);
  266 (* EQ *);
  267 (* GTA *);
  268 (* LTA *);
  269 (* ABS *);
  270 (* EXP *);
  271 (* DIV *);
  272 (* MOD *);
  273 (* MUL *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* AND *);
  277 (* OR *);
  278 (* NOT *);
    0|]

let yytransl_block = [|
  279 (* INT *);
  280 (* ID *);
  281 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\004\000\
\004\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\007\000\007\000\008\000\008\000\009\000\009\000\010\000\
\010\000\011\000\011\000\012\000\012\000\013\000\013\000\014\000\
\014\000\015\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\001\000\003\000\001\000\002\000\
\001\000\004\000\004\000\003\000\003\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\002\000\001\000\003\000\001\000\007\000\
\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\035\000\
\034\000\036\000\037\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\029\000\031\000\
\033\000\000\000\000\000\028\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\026\000\
\000\000\000\000\000\000\000\000\000\000\032\000"

let yydgoto = "\002\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000"

let yysindex = "\003\000\
\001\000\000\000\253\254\253\254\000\000\033\255\030\255\000\000\
\000\000\000\000\000\000\003\255\244\254\000\000\054\255\250\254\
\000\255\254\254\015\255\019\255\000\000\025\255\000\000\000\000\
\000\000\021\255\005\255\000\000\054\255\000\000\253\254\253\254\
\030\255\004\255\027\255\030\255\030\255\030\255\030\255\030\255\
\030\255\000\000\253\254\244\254\000\000\250\254\030\255\250\254\
\030\255\250\254\000\255\254\254\015\255\019\255\000\000\000\000\
\039\255\250\254\250\254\253\254\251\254\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\195\000\000\000\028\001\185\000\
\149\000\113\000\077\000\041\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\213\000\000\000\203\000\000\000\221\000\
\000\000\239\000\167\000\131\000\095\000\059\000\000\000\000\000\
\000\000\001\001\019\001\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\002\000\038\000\039\000\063\000\014\000\036\000\037\000\
\035\000\040\000\027\000\000\000\069\000\000\000\000\000"

let yytablesize = 570
let yytable = "\003\000\
\005\000\004\000\062\000\001\000\026\000\027\000\003\000\032\000\
\004\000\006\000\043\000\030\000\036\000\047\000\038\000\031\000\
\006\000\037\000\007\000\008\000\009\000\010\000\027\000\031\000\
\042\000\031\000\008\000\009\000\010\000\003\000\039\000\004\000\
\003\000\040\000\004\000\003\000\049\000\004\000\041\000\006\000\
\023\000\031\000\006\000\002\000\057\000\060\000\046\000\048\000\
\050\000\008\000\009\000\010\000\008\000\009\000\010\000\008\000\
\009\000\010\000\022\000\031\000\058\000\061\000\059\000\033\000\
\034\000\035\000\055\000\056\000\044\000\029\000\045\000\051\000\
\053\000\052\000\028\000\000\000\021\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\003\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\007\000\008\000\
\009\000\010\000\027\000\009\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\008\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\023\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\022\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\021\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\000\000\000\000\000\000\000\000\021\000\021\000\021\000\
\021\000\021\000\020\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\000\000\000\000\000\000\000\000\020\000\
\020\000\020\000\020\000\020\000\019\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\019\000\019\000\018\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\017\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\017\000\017\000\016\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\016\000\016\000\015\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\000\000\005\000\000\000\
\005\000\005\000\005\000\005\000\015\000\015\000\014\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\005\000\
\004\000\000\000\004\000\004\000\004\000\004\000\014\000\014\000\
\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\012\000\013\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\013\000\010\000\000\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\010\000\011\000\000\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\009\000\
\000\000\009\000\009\000\009\000\009\000\000\000\011\000\011\000\
\008\000\000\000\008\000\008\000\008\000\008\000\000\000\009\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000"

let yycheck = "\003\001\
\000\000\005\001\008\001\001\000\003\000\004\000\003\001\020\001\
\005\001\013\001\006\001\009\001\019\001\010\001\017\001\021\001\
\013\001\018\001\022\001\023\001\024\001\025\001\000\000\021\001\
\004\001\021\001\023\001\024\001\025\001\003\001\016\001\005\001\
\003\001\015\001\005\001\003\001\010\001\005\001\014\001\013\001\
\000\000\021\001\013\001\000\000\043\000\007\001\033\000\034\000\
\035\000\023\001\024\001\025\001\023\001\024\001\025\001\023\001\
\024\001\025\001\000\000\021\001\047\000\060\000\049\000\010\001\
\011\001\012\001\040\000\041\000\031\000\007\000\032\000\036\000\
\038\000\037\000\006\000\255\255\000\000\255\255\039\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\003\001\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\004\001\000\000\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\000\000\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\004\001\255\255\
\006\001\007\001\008\001\009\001\020\001\021\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\021\001\
\004\001\255\255\006\001\007\001\008\001\009\001\020\001\021\001\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\004\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\004\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\004\001\
\255\255\006\001\007\001\008\001\009\001\255\255\020\001\021\001\
\004\001\255\255\006\001\007\001\008\001\009\001\255\255\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001"

let yynames_const = "\
  COMMA\000\
  TILDA\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  DELIMITER\000\
  EOF\000\
  EQ\000\
  GTA\000\
  LTA\000\
  ABS\000\
  EXP\000\
  DIV\000\
  MOD\000\
  MUL\000\
  PLUS\000\
  MINUS\000\
  AND\000\
  OR\000\
  NOT\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 20 "a3.mly"
                                              ( _1 )
# 307 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expr) in
    Obj.repr(
# 21 "a3.mly"
                                              ( _1 )
# 314 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "a3.mly"
                                                ( Done )
# 320 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 26 "a3.mly"
                                                (Disjunction (_1, _3))
# 328 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 27 "a3.mly"
                                                (_1)
# 335 "a3.ml"
               : 'or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 31 "a3.mly"
                                                 (Conjunction (_1, _3))
# 343 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expr) in
    Obj.repr(
# 32 "a3.mly"
                                                 (_1)
# 350 "a3.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 36 "a3.mly"
                                                     (Not (_2))
# 357 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparison_expr) in
    Obj.repr(
# 37 "a3.mly"
                                                     (_1)
# 364 "a3.ml"
               : 'not_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 41 "a3.mly"
                                                (GreaterTE (_1, _4))
# 372 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'comparison_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 42 "a3.mly"
                                                (LessTE (_1, _4))
# 380 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 43 "a3.mly"
                                                (GreaterT (_1, _3))
# 388 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 44 "a3.mly"
                                                (LessT (_1, _3))
# 396 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 45 "a3.mly"
                                                (Equals (_1, _3))
# 404 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expr) in
    Obj.repr(
# 46 "a3.mly"
                                                (_1)
# 411 "a3.ml"
               : 'comparison_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sub_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_expr) in
    Obj.repr(
# 50 "a3.mly"
                                                (Sub (_1, _3))
# 419 "a3.ml"
               : 'sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_expr) in
    Obj.repr(
# 51 "a3.mly"
                                                (_1)
# 426 "a3.ml"
               : 'sub_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expr) in
    Obj.repr(
# 55 "a3.mly"
                                                (Add (_1, _3))
# 434 "a3.ml"
               : 'add_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expr) in
    Obj.repr(
# 56 "a3.mly"
                                                (_1)
# 441 "a3.ml"
               : 'add_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mod_expr) in
    Obj.repr(
# 59 "a3.mly"
                                                (Mult (_1, _3))
# 449 "a3.ml"
               : 'mult_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_expr) in
    Obj.repr(
# 60 "a3.mly"
                                                (_1)
# 456 "a3.ml"
               : 'mult_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expr) in
    Obj.repr(
# 63 "a3.mly"
                                                (Rem (_1, _3))
# 464 "a3.ml"
               : 'mod_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expr) in
    Obj.repr(
# 64 "a3.mly"
                                                (_1)
# 471 "a3.ml"
               : 'mod_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exponent_expr) in
    Obj.repr(
# 67 "a3.mly"
                                                (Div (_1, _3))
# 479 "a3.ml"
               : 'div_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exponent_expr) in
    Obj.repr(
# 68 "a3.mly"
                                                (_1)
# 486 "a3.ml"
               : 'div_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'abs_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exponent_expr) in
    Obj.repr(
# 71 "a3.mly"
                                                (Exp (_1, _3))
# 494 "a3.ml"
               : 'exponent_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expr) in
    Obj.repr(
# 72 "a3.mly"
                                                (_1)
# 501 "a3.ml"
               : 'exponent_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 75 "a3.mly"
                                           (Abs (_2))
# 508 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expr) in
    Obj.repr(
# 76 "a3.mly"
                                           (_1)
# 515 "a3.ml"
               : 'abs_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 80 "a3.mly"
                                          (InParen(_2))
# 522 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expr) in
    Obj.repr(
# 81 "a3.mly"
                                                 (_1)
# 529 "a3.ml"
               : 'paren_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'or_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'or_expr) in
    Obj.repr(
# 85 "a3.mly"
                                           (IfThenElse(_2,_4,_6))
# 538 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 86 "a3.mly"
                                              (_1)
# 545 "a3.ml"
               : 'ifte_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "a3.mly"
                                                (Var (_1))
# 552 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 91 "a3.mly"
                                                (N (_1))
# 559 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 92 "a3.mly"
                                                (B (_1))
# 566 "a3.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
